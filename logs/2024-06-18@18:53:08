18:53 [INFO]
--------------------
Started logging at 18:53:08
--------------------

18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=177)
           2	LOAD_FAST(arg=0, lineno=180)
           4	LOAD_ATTR(arg=0, lineno=180)
           6	UNPACK_SEQUENCE(arg=2, lineno=180)
           8	STORE_FAST(arg=1, lineno=180)
          10	STORE_FAST(arg=2, lineno=180)
          12	LOAD_FAST(arg=1, lineno=181)
          14	LOAD_GLOBAL(arg=1, lineno=181)
          16	LOAD_METHOD(arg=2, lineno=181)
          18	LOAD_FAST(arg=2, lineno=181)
          20	CALL_METHOD(arg=1, lineno=181)
          22	BINARY_MULTIPLY(arg=None, lineno=181)
          24	LOAD_FAST(arg=1, lineno=181)
          26	LOAD_GLOBAL(arg=1, lineno=181)
          28	LOAD_METHOD(arg=3, lineno=181)
          30	LOAD_FAST(arg=2, lineno=181)
          32	CALL_METHOD(arg=1, lineno=181)
          34	BINARY_MULTIPLY(arg=None, lineno=181)
          36	BUILD_TUPLE(arg=2, lineno=181)
          38	RETURN_VALUE(arg=None, lineno=181)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=177)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=180)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=180)
18:53 [DEBUG]stack ['$scans2.0']
18:53 [DEBUG]dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=180)
18:53 [DEBUG]stack ['$4load_attr.1']
18:53 [DEBUG]dispatch pc=8, inst=STORE_FAST(arg=1, lineno=180)
18:53 [DEBUG]stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
18:53 [DEBUG]dispatch pc=10, inst=STORE_FAST(arg=2, lineno=180)
18:53 [DEBUG]stack ['$6unpack_sequence.3']
18:53 [DEBUG]dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=181)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=181)
18:53 [DEBUG]stack ['$r12.5']
18:53 [DEBUG]dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=181)
18:53 [DEBUG]stack ['$r12.5', '$14load_global.6']
18:53 [DEBUG]dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=181)
18:53 [DEBUG]stack ['$r12.5', '$16load_method.7']
18:53 [DEBUG]dispatch pc=20, inst=CALL_METHOD(arg=1, lineno=181)
18:53 [DEBUG]stack ['$r12.5', '$16load_method.7', '$theta18.8']
18:53 [DEBUG]dispatch pc=22, inst=BINARY_MULTIPLY(arg=None, lineno=181)
18:53 [DEBUG]stack ['$r12.5', '$20call_method.9']
18:53 [DEBUG]dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=181)
18:53 [DEBUG]stack ['$22binary_multiply.10']
18:53 [DEBUG]dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=181)
18:53 [DEBUG]stack ['$22binary_multiply.10', '$r24.11']
18:53 [DEBUG]dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=181)
18:53 [DEBUG]stack ['$22binary_multiply.10', '$r24.11', '$26load_global.12']
18:53 [DEBUG]dispatch pc=30, inst=LOAD_FAST(arg=2, lineno=181)
18:53 [DEBUG]stack ['$22binary_multiply.10', '$r24.11', '$28load_method.13']
18:53 [DEBUG]dispatch pc=32, inst=CALL_METHOD(arg=1, lineno=181)
18:53 [DEBUG]stack ['$22binary_multiply.10', '$r24.11', '$28load_method.13', '$theta30.14']
18:53 [DEBUG]dispatch pc=34, inst=BINARY_MULTIPLY(arg=None, lineno=181)
18:53 [DEBUG]stack ['$22binary_multiply.10', '$r24.11', '$32call_method.15']
18:53 [DEBUG]dispatch pc=36, inst=BUILD_TUPLE(arg=2, lineno=181)
18:53 [DEBUG]stack ['$22binary_multiply.10', '$34binary_multiply.16']
18:53 [DEBUG]dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=181)
18:53 [DEBUG]stack ['$36build_tuple.17']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$scans2.0'}), (4, {'item': '$scans2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$r12.5'}), (14, {'res': '$14load_global.6'}), (16, {'item': '$14load_global.6', 'res': '$16load_method.7'}), (18, {'res': '$theta18.8'}), (20, {'func': '$16load_method.7', 'args': ['$theta18.8'], 'res': '$20call_method.9'}), (22, {'lhs': '$r12.5', 'rhs': '$20call_method.9', 'res': '$22binary_multiply.10'}), (24, {'res': '$r24.11'}), (26, {'res': '$26load_global.12'}), (28, {'item': '$26load_global.12', 'res': '$28load_method.13'}), (30, {'res': '$theta30.14'}), (32, {'func': '$28load_method.13', 'args': ['$theta30.14'], 'res': '$32call_method.15'}), (34, {'lhs': '$r24.11', 'rhs': '$32call_method.15', 'res': '$34binary_multiply.16'}), (36, {'items': ['$22binary_multiply.10', '$34binary_multiply.16'], 'res': '$36build_tuple.17'}), (38, {'retval': '$36build_tuple.17', 'castval': '$38return_value.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    scans = arg(0, name=scans)               ['scans']
    $4load_attr.1 = getattr(value=scans, attr=T) ['$4load_attr.1', 'scans']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    r = $6unpack_sequence.2                  ['$6unpack_sequence.2', 'r']
    theta = $6unpack_sequence.3              ['$6unpack_sequence.3', 'theta']
    $14load_global.6 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>) ['$14load_global.6']
    $16load_method.7 = getattr(value=$14load_global.6, attr=cos) ['$14load_global.6', '$16load_method.7']
    $20call_method.9 = call $16load_method.7(theta, func=$16load_method.7, args=[Var(theta, tools.py:180)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_method.7', '$20call_method.9', 'theta']
    $22binary_multiply.10 = r * $20call_method.9 ['$20call_method.9', '$22binary_multiply.10', 'r']
    $26load_global.12 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>) ['$26load_global.12']
    $28load_method.13 = getattr(value=$26load_global.12, attr=sin) ['$26load_global.12', '$28load_method.13']
    $32call_method.15 = call $28load_method.13(theta, func=$28load_method.13, args=[Var(theta, tools.py:180)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_method.13', '$32call_method.15', 'theta']
    $34binary_multiply.16 = r * $32call_method.15 ['$32call_method.15', '$34binary_multiply.16', 'r']
    $36build_tuple.17 = build_tuple(items=[Var($22binary_multiply.10, tools.py:181), Var($34binary_multiply.16, tools.py:181)]) ['$22binary_multiply.10', '$34binary_multiply.16', '$36build_tuple.17']
    $38return_value.18 = cast(value=$36build_tuple.17) ['$36build_tuple.17', '$38return_value.18']
    return $38return_value.18                ['$38return_value.18']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff979fbfd0>
18:53 [DEBUG]on stmt: scans = arg(0, name=scans)
18:53 [DEBUG]on stmt: $4load_attr.1 = getattr(value=scans, attr=T)
18:53 [DEBUG]on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
18:53 [DEBUG]on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: r = $6unpack_sequence.2
18:53 [DEBUG]on stmt: theta = $6unpack_sequence.3
18:53 [DEBUG]on stmt: $14load_global.6 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>)
18:53 [DEBUG]on stmt: $16load_method.7 = getattr(value=$14load_global.6, attr=cos)
18:53 [DEBUG]on stmt: $20call_method.9 = call $16load_method.7(theta, func=$16load_method.7, args=[Var(theta, tools.py:180)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $22binary_multiply.10 = r * $20call_method.9
18:53 [DEBUG]on stmt: $26load_global.12 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>)
18:53 [DEBUG]on stmt: $28load_method.13 = getattr(value=$26load_global.12, attr=sin)
18:53 [DEBUG]on stmt: $32call_method.15 = call $28load_method.13(theta, func=$28load_method.13, args=[Var(theta, tools.py:180)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $34binary_multiply.16 = r * $32call_method.15
18:53 [DEBUG]on stmt: $36build_tuple.17 = build_tuple(items=[Var($22binary_multiply.10, tools.py:181), Var($34binary_multiply.16, tools.py:181)])
18:53 [DEBUG]on stmt: $38return_value.18 = cast(value=$36build_tuple.17)
18:53 [DEBUG]on stmt: return $38return_value.18
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$14load_global.6': [<numba.core.ir.Assign object at 0xffff97a56190>],
             '$16load_method.7': [<numba.core.ir.Assign object at 0xffff97a56310>],
             '$20call_method.9': [<numba.core.ir.Assign object at 0xffff97a565e0>],
             '$22binary_multiply.10': [<numba.core.ir.Assign object at 0xffff97a56730>],
             '$26load_global.12': [<numba.core.ir.Assign object at 0xffff97a569d0>],
             '$28load_method.13': [<numba.core.ir.Assign object at 0xffff97a56b50>],
             '$32call_method.15': [<numba.core.ir.Assign object at 0xffff97a56e20>],
             '$34binary_multiply.16': [<numba.core.ir.Assign object at 0xffff97a56f70>],
             '$36build_tuple.17': [<numba.core.ir.Assign object at 0xffff97a58160>],
             '$38return_value.18': [<numba.core.ir.Assign object at 0xffff97a582b0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0xffff97a39ca0>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0xffff97a39700>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0xffff97a392b0>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0xffff97a399a0>],
             'r': [<numba.core.ir.Assign object at 0xffff97a39280>],
             'scans': [<numba.core.ir.Assign object at 0xffff97a299a0>],
             'theta': [<numba.core.ir.Assign object at 0xffff97a39fd0>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=1)
           4	LOAD_GLOBAL(arg=0, lineno=1)
           6	LOAD_FAST(arg=1, lineno=1)
           8	CALL_FUNCTION(arg=1, lineno=1)
          10	BINARY_MULTIPLY(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=1)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=1)
18:53 [DEBUG]stack ['$r_12.0']
18:53 [DEBUG]dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=1)
18:53 [DEBUG]stack ['$r_12.0', '$4load_global.1']
18:53 [DEBUG]dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=1)
18:53 [DEBUG]stack ['$r_12.0', '$4load_global.1', '$theta_16.2']
18:53 [DEBUG]dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=1)
18:53 [DEBUG]stack ['$r_12.0', '$8call_function.3']
18:53 [DEBUG]dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
18:53 [DEBUG]stack ['$10binary_multiply.4']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$r_12.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$theta_16.2'}), (8, {'func': '$4load_global.1', 'args': ['$theta_16.2'], 'res': '$8call_function.3'}), (10, {'lhs': '$r_12.0', 'rhs': '$8call_function.3', 'res': '$10binary_multiply.4'}), (12, {'retval': '$10binary_multiply.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    r_1 = arg(0, name=r_1)                   ['r_1']
    theta_1 = arg(1, name=theta_1)           ['theta_1']
    $4load_global.1 = global(__ufunc_or_dufunc_0xffffaeba754: <ufunc 'cos'>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(theta_1, func=$4load_global.1, args=[Var(theta_1, tools.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'theta_1']
    $10binary_multiply.4 = r_1 * $8call_function.3 ['$10binary_multiply.4', '$8call_function.3', 'r_1']
    $12return_value.5 = cast(value=$10binary_multiply.4) ['$10binary_multiply.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97905d60>
18:53 [DEBUG]on stmt: r_1 = arg(0, name=r_1)
18:53 [DEBUG]on stmt: theta_1 = arg(1, name=theta_1)
18:53 [DEBUG]on stmt: $4load_global.1 = global(__ufunc_or_dufunc_0xffffaeba754: <ufunc 'cos'>)
18:53 [DEBUG]on stmt: $8call_function.3 = call $4load_global.1(theta_1, func=$4load_global.1, args=[Var(theta_1, tools.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $10binary_multiply.4 = r_1 * $8call_function.3
18:53 [DEBUG]on stmt: $12return_value.5 = cast(value=$10binary_multiply.4)
18:53 [DEBUG]on stmt: return $12return_value.5
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0xffff9790e460>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0xffff9790e5e0>],
             '$4load_global.1': [<numba.core.ir.Assign object at 0xffff9790e040>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0xffff9790e310>],
             'r_1': [<numba.core.ir.Assign object at 0xffff979059d0>],
             'theta_1': [<numba.core.ir.Assign object at 0xffff97905460>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=189)
           2	LOAD_FAST(arg=0, lineno=204)
           4	LOAD_FAST(arg=2, lineno=204)
           6	COMPARE_OP(arg=4, lineno=204)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=204)
          10	LOAD_CONST(arg=1, lineno=207)
          12	RETURN_VALUE(arg=None, lineno=207)
>         14	LOAD_CONST(arg=1, lineno=209)
          16	STORE_FAST(arg=4, lineno=209)
          18	LOAD_FAST(arg=2, lineno=210)
          20	LOAD_FAST(arg=0, lineno=210)
          22	BINARY_SUBTRACT(arg=None, lineno=210)
          24	STORE_FAST(arg=5, lineno=210)
>         26	LOAD_FAST(arg=4, lineno=211)
          28	LOAD_FAST(arg=0, lineno=211)
          30	COMPARE_OP(arg=0, lineno=211)
          32	POP_JUMP_IF_FALSE(arg=120, lineno=211)
          34	LOAD_FAST(arg=1, lineno=212)
          36	LOAD_FAST(arg=4, lineno=212)
          38	BINARY_SUBSCR(arg=None, lineno=212)
          40	STORE_FAST(arg=6, lineno=212)
          42	LOAD_FAST(arg=3, lineno=213)
          44	LOAD_FAST(arg=5, lineno=213)
          46	BINARY_SUBSCR(arg=None, lineno=213)
          48	STORE_FAST(arg=7, lineno=213)
          50	LOAD_FAST(arg=7, lineno=216)
          52	LOAD_CONST(arg=2, lineno=216)
          54	COMPARE_OP(arg=3, lineno=216)
          56	POP_JUMP_IF_FALSE(arg=86, lineno=216)
          58	LOAD_FAST(arg=6, lineno=220)
          60	LOAD_FAST(arg=7, lineno=220)
          62	COMPARE_OP(arg=3, lineno=220)
          64	POP_JUMP_IF_FALSE(arg=102, lineno=220)
          66	LOAD_FAST(arg=6, lineno=220)
          68	LOAD_CONST(arg=2, lineno=220)
          70	COMPARE_OP(arg=3, lineno=220)
          72	POP_JUMP_IF_FALSE(arg=102, lineno=220)
          74	LOAD_FAST(arg=5, lineno=221)
          76	LOAD_CONST(arg=2, lineno=221)
          78	BINARY_ADD(arg=None, lineno=221)
          80	UNARY_NEGATIVE(arg=None, lineno=221)
          82	RETURN_VALUE(arg=None, lineno=221)
          84	JUMP_FORWARD(arg=16, lineno=221)
>         86	LOAD_FAST(arg=6, lineno=222)
          88	LOAD_CONST(arg=2, lineno=222)
          90	COMPARE_OP(arg=3, lineno=222)
          92	POP_JUMP_IF_FALSE(arg=102, lineno=222)
          94	LOAD_FAST(arg=6, lineno=224)
          96	LOAD_FAST(arg=3, lineno=224)
          98	LOAD_FAST(arg=5, lineno=224)
         100	STORE_SUBSCR(arg=None, lineno=224)
>        102	LOAD_FAST(arg=4, lineno=225)
         104	LOAD_CONST(arg=2, lineno=225)
         106	INPLACE_ADD(arg=None, lineno=225)
         108	STORE_FAST(arg=4, lineno=225)
         110	LOAD_FAST(arg=5, lineno=226)
         112	LOAD_CONST(arg=2, lineno=226)
         114	INPLACE_ADD(arg=None, lineno=226)
         116	STORE_FAST(arg=5, lineno=226)
         118	JUMP_ABSOLUTE(arg=26, lineno=226)
>        120	LOAD_FAST(arg=5, lineno=227)
         122	RETURN_VALUE(arg=None, lineno=227)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=189)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=204)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=204)
18:53 [DEBUG]stack ['$src_ndim2.0']
18:53 [DEBUG]dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=204)
18:53 [DEBUG]stack ['$src_ndim2.0', '$dest_ndim4.1']
18:53 [DEBUG]dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=204)
18:53 [DEBUG]stack ['$6compare_op.2']
18:53 [DEBUG]end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=10 nstack_initial=0)
18:53 [DEBUG]dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=207)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=207)
18:53 [DEBUG]stack ['$const10.0']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]pending: deque([State(pc_initial=14 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=14 nstack_initial=0)
18:53 [DEBUG]dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=209)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=16, inst=STORE_FAST(arg=4, lineno=209)
18:53 [DEBUG]stack ['$const14.0']
18:53 [DEBUG]dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=210)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=210)
18:53 [DEBUG]stack ['$dest_ndim18.1']
18:53 [DEBUG]dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=210)
18:53 [DEBUG]stack ['$dest_ndim18.1', '$src_ndim20.2']
18:53 [DEBUG]dispatch pc=24, inst=STORE_FAST(arg=5, lineno=210)
18:53 [DEBUG]stack ['$22binary_subtract.3']
18:53 [DEBUG]end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=26 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=26 nstack_initial=0)
18:53 [DEBUG]dispatch pc=26, inst=LOAD_FAST(arg=4, lineno=211)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=211)
18:53 [DEBUG]stack ['$src_index26.0']
18:53 [DEBUG]dispatch pc=30, inst=COMPARE_OP(arg=0, lineno=211)
18:53 [DEBUG]stack ['$src_index26.0', '$src_ndim28.1']
18:53 [DEBUG]dispatch pc=32, inst=POP_JUMP_IF_FALSE(arg=120, lineno=211)
18:53 [DEBUG]stack ['$30compare_op.2']
18:53 [DEBUG]end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=120, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=120 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=34 nstack_initial=0)
18:53 [DEBUG]dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=212)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=212)
18:53 [DEBUG]stack ['$src_shape34.0']
18:53 [DEBUG]dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=212)
18:53 [DEBUG]stack ['$src_shape34.0', '$src_index36.1']
18:53 [DEBUG]dispatch pc=40, inst=STORE_FAST(arg=6, lineno=212)
18:53 [DEBUG]stack ['$38binary_subscr.2']
18:53 [DEBUG]dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=213)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=213)
18:53 [DEBUG]stack ['$dest_shape42.3']
18:53 [DEBUG]dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=213)
18:53 [DEBUG]stack ['$dest_shape42.3', '$dest_index44.4']
18:53 [DEBUG]dispatch pc=48, inst=STORE_FAST(arg=7, lineno=213)
18:53 [DEBUG]stack ['$46binary_subscr.5']
18:53 [DEBUG]dispatch pc=50, inst=LOAD_FAST(arg=7, lineno=216)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=216)
18:53 [DEBUG]stack ['$dest_dim_size50.6']
18:53 [DEBUG]dispatch pc=54, inst=COMPARE_OP(arg=3, lineno=216)
18:53 [DEBUG]stack ['$dest_dim_size50.6', '$const52.7']
18:53 [DEBUG]dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=86, lineno=216)
18:53 [DEBUG]stack ['$54compare_op.8']
18:53 [DEBUG]end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=120 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=120 nstack_initial=0)
18:53 [DEBUG]dispatch pc=120, inst=LOAD_FAST(arg=5, lineno=227)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=122, inst=RETURN_VALUE(arg=None, lineno=227)
18:53 [DEBUG]stack ['$dest_index120.0']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=58 nstack_initial=0)
18:53 [DEBUG]dispatch pc=58, inst=LOAD_FAST(arg=6, lineno=220)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=60, inst=LOAD_FAST(arg=7, lineno=220)
18:53 [DEBUG]stack ['$src_dim_size58.0']
18:53 [DEBUG]dispatch pc=62, inst=COMPARE_OP(arg=3, lineno=220)
18:53 [DEBUG]stack ['$src_dim_size58.0', '$dest_dim_size60.1']
18:53 [DEBUG]dispatch pc=64, inst=POP_JUMP_IF_FALSE(arg=102, lineno=220)
18:53 [DEBUG]stack ['$62compare_op.2']
18:53 [DEBUG]end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=86 nstack_initial=0)
18:53 [DEBUG]dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=222)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=88, inst=LOAD_CONST(arg=2, lineno=222)
18:53 [DEBUG]stack ['$src_dim_size86.0']
18:53 [DEBUG]dispatch pc=90, inst=COMPARE_OP(arg=3, lineno=222)
18:53 [DEBUG]stack ['$src_dim_size86.0', '$const88.1']
18:53 [DEBUG]dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=102, lineno=222)
18:53 [DEBUG]stack ['$90compare_op.2']
18:53 [DEBUG]end state. edges=[Edge(pc=94, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=66 nstack_initial=0)
18:53 [DEBUG]dispatch pc=66, inst=LOAD_FAST(arg=6, lineno=220)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=220)
18:53 [DEBUG]stack ['$src_dim_size66.0']
18:53 [DEBUG]dispatch pc=70, inst=COMPARE_OP(arg=3, lineno=220)
18:53 [DEBUG]stack ['$src_dim_size66.0', '$const68.1']
18:53 [DEBUG]dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=102, lineno=220)
18:53 [DEBUG]stack ['$70compare_op.2']
18:53 [DEBUG]end state. edges=[Edge(pc=74, stack=(), blockstack=(), npush=0), Edge(pc=102, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=102 nstack_initial=0)
18:53 [DEBUG]dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=225)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=225)
18:53 [DEBUG]stack ['$src_index102.0']
18:53 [DEBUG]dispatch pc=106, inst=INPLACE_ADD(arg=None, lineno=225)
18:53 [DEBUG]stack ['$src_index102.0', '$const104.1']
18:53 [DEBUG]dispatch pc=108, inst=STORE_FAST(arg=4, lineno=225)
18:53 [DEBUG]stack ['$106inplace_add.2']
18:53 [DEBUG]dispatch pc=110, inst=LOAD_FAST(arg=5, lineno=226)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=226)
18:53 [DEBUG]stack ['$dest_index110.3']
18:53 [DEBUG]dispatch pc=114, inst=INPLACE_ADD(arg=None, lineno=226)
18:53 [DEBUG]stack ['$dest_index110.3', '$const112.4']
18:53 [DEBUG]dispatch pc=116, inst=STORE_FAST(arg=5, lineno=226)
18:53 [DEBUG]stack ['$114inplace_add.5']
18:53 [DEBUG]dispatch pc=118, inst=JUMP_ABSOLUTE(arg=26, lineno=226)
18:53 [DEBUG]stack []
18:53 [DEBUG]end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=94 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=94 nstack_initial=0)
18:53 [DEBUG]dispatch pc=94, inst=LOAD_FAST(arg=6, lineno=224)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=224)
18:53 [DEBUG]stack ['$src_dim_size94.0']
18:53 [DEBUG]dispatch pc=98, inst=LOAD_FAST(arg=5, lineno=224)
18:53 [DEBUG]stack ['$src_dim_size94.0', '$dest_shape96.1']
18:53 [DEBUG]dispatch pc=100, inst=STORE_SUBSCR(arg=None, lineno=224)
18:53 [DEBUG]stack ['$src_dim_size94.0', '$dest_shape96.1', '$dest_index98.2']
18:53 [DEBUG]end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
18:53 [DEBUG]pending: deque([State(pc_initial=74 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=74 nstack_initial=0)
18:53 [DEBUG]dispatch pc=74, inst=LOAD_FAST(arg=5, lineno=221)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=76, inst=LOAD_CONST(arg=2, lineno=221)
18:53 [DEBUG]stack ['$dest_index74.0']
18:53 [DEBUG]dispatch pc=78, inst=BINARY_ADD(arg=None, lineno=221)
18:53 [DEBUG]stack ['$dest_index74.0', '$const76.1']
18:53 [DEBUG]dispatch pc=80, inst=UNARY_NEGATIVE(arg=None, lineno=221)
18:53 [DEBUG]stack ['$78binary_add.2']
18:53 [DEBUG]dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=221)
18:53 [DEBUG]stack ['$80unary_negative.3']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
18:53 [DEBUG]pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=102 nstack_initial=0)])
18:53 [DEBUG]pending: deque([State(pc_initial=102 nstack_initial=0)])
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=94 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=120 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
18:53 [DEBUG]block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
18:53 [DEBUG]block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$src_index26.0'}), (28, {'res': '$src_ndim28.1'}), (30, {'lhs': '$src_index26.0', 'rhs': '$src_ndim28.1', 'res': '$30compare_op.2'}), (32, {'pred': '$30compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 120: ()})
18:53 [DEBUG]block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$src_shape34.0'}), (36, {'res': '$src_index36.1'}), (38, {'index': '$src_index36.1', 'target': '$src_shape34.0', 'res': '$38binary_subscr.2'}), (40, {'value': '$38binary_subscr.2'}), (42, {'res': '$dest_shape42.3'}), (44, {'res': '$dest_index44.4'}), (46, {'index': '$dest_index44.4', 'target': '$dest_shape42.3', 'res': '$46binary_subscr.5'}), (48, {'value': '$46binary_subscr.5'}), (50, {'res': '$dest_dim_size50.6'}), (52, {'res': '$const52.7'}), (54, {'lhs': '$dest_dim_size50.6', 'rhs': '$const52.7', 'res': '$54compare_op.8'}), (56, {'pred': '$54compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 86: ()})
18:53 [DEBUG]block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$src_dim_size58.0'}), (60, {'res': '$dest_dim_size60.1'}), (62, {'lhs': '$src_dim_size58.0', 'rhs': '$dest_dim_size60.1', 'res': '$62compare_op.2'}), (64, {'pred': '$62compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 102: ()})
18:53 [DEBUG]block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$src_dim_size66.0'}), (68, {'res': '$const68.1'}), (70, {'lhs': '$src_dim_size66.0', 'rhs': '$const68.1', 'res': '$70compare_op.2'}), (72, {'pred': '$70compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: (), 102: ()})
18:53 [DEBUG]block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$dest_index74.0'}), (76, {'res': '$const76.1'}), (78, {'lhs': '$dest_index74.0', 'rhs': '$const76.1', 'res': '$78binary_add.2'}), (80, {'value': '$78binary_add.2', 'res': '$80unary_negative.3'}), (82, {'retval': '$80unary_negative.3', 'castval': '$82return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$src_dim_size86.0'}), (88, {'res': '$const88.1'}), (90, {'lhs': '$src_dim_size86.0', 'rhs': '$const88.1', 'res': '$90compare_op.2'}), (92, {'pred': '$90compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={94: (), 102: ()})
18:53 [DEBUG]block_infos State(pc_initial=94 nstack_initial=0):
AdaptBlockInfo(insts=((94, {'res': '$src_dim_size94.0'}), (96, {'res': '$dest_shape96.1'}), (98, {'res': '$dest_index98.2'}), (100, {'target': '$dest_shape96.1', 'index': '$dest_index98.2', 'value': '$src_dim_size94.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: ()})
18:53 [DEBUG]block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$src_index102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$src_index102.0', 'rhs': '$const104.1', 'res': '$106inplace_add.2'}), (108, {'value': '$106inplace_add.2'}), (110, {'res': '$dest_index110.3'}), (112, {'res': '$const112.4'}), (114, {'lhs': '$dest_index110.3', 'rhs': '$const112.4', 'res': '$114inplace_add.5'}), (116, {'value': '$114inplace_add.5'}), (118, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
18:53 [DEBUG]block_infos State(pc_initial=120 nstack_initial=0):
AdaptBlockInfo(insts=((120, {'res': '$dest_index120.0'}), (122, {'retval': '$dest_index120.0', 'castval': '$122return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    $30compare_op.2 = src_index < src_ndim   ['$30compare_op.2', 'src_index', 'src_ndim']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 120                  ['$32pred']
label 34:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const52.7 = const(int, 1)               ['$const52.7']
    $54compare_op.8 = dest_dim_size != $const52.7 ['$54compare_op.8', '$const52.7', 'dest_dim_size']
    bool56 = global(bool: <class 'bool'>)    ['bool56']
    $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.8', '$56pred', 'bool56']
    branch $56pred, 58, 86                   ['$56pred']
label 58:
    $62compare_op.2 = src_dim_size != dest_dim_size ['$62compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None) ['$62compare_op.2', '$64pred', 'bool64']
    branch $64pred, 66, 102                  ['$64pred']
label 66:
    $const68.1 = const(int, 1)               ['$const68.1']
    $70compare_op.2 = src_dim_size != $const68.1 ['$70compare_op.2', '$const68.1', 'src_dim_size']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None) ['$70compare_op.2', '$72pred', 'bool72']
    branch $72pred, 74, 102                  ['$72pred']
label 74:
    $const76.1 = const(int, 1)               ['$const76.1']
    $78binary_add.2 = dest_index + $const76.1 ['$78binary_add.2', '$const76.1', 'dest_index']
    $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2) ['$78binary_add.2', '$80unary_negative.3']
    $82return_value.4 = cast(value=$80unary_negative.3) ['$80unary_negative.3', '$82return_value.4']
    return $82return_value.4                 ['$82return_value.4']
label 86:
    $const88.1 = const(int, 1)               ['$const88.1']
    $90compare_op.2 = src_dim_size != $const88.1 ['$90compare_op.2', '$const88.1', 'src_dim_size']
    bool92 = global(bool: <class 'bool'>)    ['bool92']
    $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None) ['$90compare_op.2', '$92pred', 'bool92']
    branch $92pred, 94, 102                  ['$92pred']
label 94:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 102                                 []
label 102:
    $const104.1 = const(int, 1)              ['$const104.1']
    $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined) ['$106inplace_add.2', '$const104.1', 'src_index']
    src_index = $106inplace_add.2            ['$106inplace_add.2', 'src_index']
    $const112.4 = const(int, 1)              ['$const112.4']
    $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined) ['$114inplace_add.5', '$const112.4', 'dest_index']
    dest_index = $114inplace_add.5           ['$114inplace_add.5', 'dest_index']
    jump 26                                  []
label 120:
    $122return_value.1 = cast(value=dest_index) ['$122return_value.1', 'dest_index']
    return $122return_value.1                ['$122return_value.1']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: src_ndim = arg(0, name=src_ndim)
18:53 [DEBUG]on stmt: src_shape = arg(1, name=src_shape)
18:53 [DEBUG]on stmt: dest_ndim = arg(2, name=dest_ndim)
18:53 [DEBUG]on stmt: dest_shape = arg(3, name=dest_shape)
18:53 [DEBUG]on stmt: $6compare_op.2 = src_ndim > dest_ndim
18:53 [DEBUG]on stmt: bool8 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $8pred, 10, 14
18:53 [DEBUG]==== SSA block analysis pass on 10
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: $const10.0 = const(int, 0)
18:53 [DEBUG]on stmt: $12return_value.1 = cast(value=$const10.0)
18:53 [DEBUG]on stmt: return $12return_value.1
18:53 [DEBUG]==== SSA block analysis pass on 14
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: src_index = const(int, 0)
18:53 [DEBUG]on stmt: dest_index = dest_ndim - src_ndim
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block analysis pass on 26
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: $30compare_op.2 = src_index < src_ndim
18:53 [DEBUG]on stmt: bool32 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $32pred, 34, 120
18:53 [DEBUG]==== SSA block analysis pass on 34
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const52.7 = const(int, 1)
18:53 [DEBUG]on stmt: $54compare_op.8 = dest_dim_size != $const52.7
18:53 [DEBUG]on stmt: bool56 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $56pred, 58, 86
18:53 [DEBUG]==== SSA block analysis pass on 58
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
18:53 [DEBUG]on stmt: bool64 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $64pred, 66, 102
18:53 [DEBUG]==== SSA block analysis pass on 66
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: $const68.1 = const(int, 1)
18:53 [DEBUG]on stmt: $70compare_op.2 = src_dim_size != $const68.1
18:53 [DEBUG]on stmt: bool72 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $72pred, 74, 102
18:53 [DEBUG]==== SSA block analysis pass on 74
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: $const76.1 = const(int, 1)
18:53 [DEBUG]on stmt: $78binary_add.2 = dest_index + $const76.1
18:53 [DEBUG]on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
18:53 [DEBUG]on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
18:53 [DEBUG]on stmt: return $82return_value.4
18:53 [DEBUG]==== SSA block analysis pass on 86
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: $const88.1 = const(int, 1)
18:53 [DEBUG]on stmt: $90compare_op.2 = src_dim_size != $const88.1
18:53 [DEBUG]on stmt: bool92 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $92pred, 94, 102
18:53 [DEBUG]==== SSA block analysis pass on 94
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: dest_shape[dest_index] = src_dim_size
18:53 [DEBUG]on stmt: jump 102
18:53 [DEBUG]==== SSA block analysis pass on 102
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: $const104.1 = const(int, 1)
18:53 [DEBUG]on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: src_index = $106inplace_add.2
18:53 [DEBUG]on stmt: $const112.4 = const(int, 1)
18:53 [DEBUG]on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: dest_index = $114inplace_add.5
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block analysis pass on 120
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff978d1250>
18:53 [DEBUG]on stmt: $122return_value.1 = cast(value=dest_index)
18:53 [DEBUG]on stmt: return $122return_value.1
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$106inplace_add.2': [<numba.core.ir.Assign object at 0xffff978d1040>],
             '$114inplace_add.5': [<numba.core.ir.Assign object at 0xffff978d1520>],
             '$122return_value.1': [<numba.core.ir.Assign object at 0xffff978d1940>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0xffff978bb4f0>],
             '$30compare_op.2': [<numba.core.ir.Assign object at 0xffff97915220>],
             '$32pred': [<numba.core.ir.Assign object at 0xffff97915130>],
             '$54compare_op.8': [<numba.core.ir.Assign object at 0xffff9796ea90>],
             '$56pred': [<numba.core.ir.Assign object at 0xffff978ca7c0>],
             '$62compare_op.2': [<numba.core.ir.Assign object at 0xffff978cad60>],
             '$64pred': [<numba.core.ir.Assign object at 0xffff978cc040>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0xffff978caa30>],
             '$70compare_op.2': [<numba.core.ir.Assign object at 0xffff978cc4c0>],
             '$72pred': [<numba.core.ir.Assign object at 0xffff978cc760>],
             '$78binary_add.2': [<numba.core.ir.Assign object at 0xffff978ccc40>],
             '$80unary_negative.3': [<numba.core.ir.Assign object at 0xffff978ccdc0>],
             '$82return_value.4': [<numba.core.ir.Assign object at 0xffff978ccf40>],
             '$8pred': [<numba.core.ir.Assign object at 0xffff978bbee0>],
             '$90compare_op.2': [<numba.core.ir.Assign object at 0xffff978cf460>],
             '$92pred': [<numba.core.ir.Assign object at 0xffff978cf700>],
             '$const10.0': [<numba.core.ir.Assign object at 0xffff978bbbb0>],
             '$const104.1': [<numba.core.ir.Assign object at 0xffff978cfe80>],
             '$const112.4': [<numba.core.ir.Assign object at 0xffff978d13a0>],
             '$const52.7': [<numba.core.ir.Assign object at 0xffff97924400>],
             '$const68.1': [<numba.core.ir.Assign object at 0xffff978cc340>],
             '$const76.1': [<numba.core.ir.Assign object at 0xffff978ccac0>],
             '$const88.1': [<numba.core.ir.Assign object at 0xffff978cf2e0>],
             'bool32': [<numba.core.ir.Assign object at 0xffff979151f0>],
             'bool56': [<numba.core.ir.Assign object at 0xffff9797e0d0>],
             'bool64': [<numba.core.ir.Assign object at 0xffff978caee0>],
             'bool72': [<numba.core.ir.Assign object at 0xffff978cc640>],
             'bool8': [<numba.core.ir.Assign object at 0xffff978cabb0>],
             'bool92': [<numba.core.ir.Assign object at 0xffff978cf5e0>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0xffff97957b50>],
             'dest_index': [<numba.core.ir.Assign object at 0xffff9790ec40>,
                            <numba.core.ir.Assign object at 0xffff978d15e0>],
             'dest_ndim': [<numba.core.ir.Assign object at 0xffff978ca550>],
             'dest_shape': [<numba.core.ir.Assign object at 0xffff978ca670>],
             'src_dim_size': [<numba.core.ir.Assign object at 0xffff9789c700>],
             'src_index': [<numba.core.ir.Assign object at 0xffff978b5130>,
                           <numba.core.ir.Assign object at 0xffff978d1100>],
             'src_ndim': [<numba.core.ir.Assign object at 0xffff978ca310>],
             'src_shape': [<numba.core.ir.Assign object at 0xffff978ca430>]})
18:53 [DEBUG]SSA violators {'src_index', 'dest_index'}
18:53 [DEBUG]Fix SSA violator on var src_index
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: src_ndim = arg(0, name=src_ndim)
18:53 [DEBUG]on stmt: src_shape = arg(1, name=src_shape)
18:53 [DEBUG]on stmt: dest_ndim = arg(2, name=dest_ndim)
18:53 [DEBUG]on stmt: dest_shape = arg(3, name=dest_shape)
18:53 [DEBUG]on stmt: $6compare_op.2 = src_ndim > dest_ndim
18:53 [DEBUG]on stmt: bool8 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $8pred, 10, 14
18:53 [DEBUG]==== SSA block rewrite pass on 10
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const10.0 = const(int, 0)
18:53 [DEBUG]on stmt: $12return_value.1 = cast(value=$const10.0)
18:53 [DEBUG]on stmt: return $12return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 14
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: src_index = const(int, 0)
18:53 [DEBUG]first assign: src_index
18:53 [DEBUG]replaced with: src_index = const(int, 0)
18:53 [DEBUG]on stmt: dest_index = dest_ndim - src_ndim
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block rewrite pass on 26
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $30compare_op.2 = src_index < src_ndim
18:53 [DEBUG]on stmt: bool32 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $32pred, 34, 120
18:53 [DEBUG]==== SSA block rewrite pass on 34
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const52.7 = const(int, 1)
18:53 [DEBUG]on stmt: $54compare_op.8 = dest_dim_size != $const52.7
18:53 [DEBUG]on stmt: bool56 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $56pred, 58, 86
18:53 [DEBUG]==== SSA block rewrite pass on 58
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
18:53 [DEBUG]on stmt: bool64 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $64pred, 66, 102
18:53 [DEBUG]==== SSA block rewrite pass on 66
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const68.1 = const(int, 1)
18:53 [DEBUG]on stmt: $70compare_op.2 = src_dim_size != $const68.1
18:53 [DEBUG]on stmt: bool72 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $72pred, 74, 102
18:53 [DEBUG]==== SSA block rewrite pass on 74
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const76.1 = const(int, 1)
18:53 [DEBUG]on stmt: $78binary_add.2 = dest_index + $const76.1
18:53 [DEBUG]on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
18:53 [DEBUG]on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
18:53 [DEBUG]on stmt: return $82return_value.4
18:53 [DEBUG]==== SSA block rewrite pass on 86
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const88.1 = const(int, 1)
18:53 [DEBUG]on stmt: $90compare_op.2 = src_dim_size != $const88.1
18:53 [DEBUG]on stmt: bool92 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $92pred, 94, 102
18:53 [DEBUG]==== SSA block rewrite pass on 94
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: dest_shape[dest_index] = src_dim_size
18:53 [DEBUG]on stmt: jump 102
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const104.1 = const(int, 1)
18:53 [DEBUG]on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: src_index = $106inplace_add.2
18:53 [DEBUG]replaced with: src_index.1 = $106inplace_add.2
18:53 [DEBUG]on stmt: $const112.4 = const(int, 1)
18:53 [DEBUG]on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: dest_index = $114inplace_add.5
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block rewrite pass on 120
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $122return_value.1 = cast(value=dest_index)
18:53 [DEBUG]on stmt: return $122return_value.1
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0xffff978bb910>],
             102: [<numba.core.ir.Assign object at 0xffff978bb0a0>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: src_ndim = arg(0, name=src_ndim)
18:53 [DEBUG]on stmt: src_shape = arg(1, name=src_shape)
18:53 [DEBUG]on stmt: dest_ndim = arg(2, name=dest_ndim)
18:53 [DEBUG]on stmt: dest_shape = arg(3, name=dest_shape)
18:53 [DEBUG]on stmt: $6compare_op.2 = src_ndim > dest_ndim
18:53 [DEBUG]on stmt: bool8 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $8pred, 10, 14
18:53 [DEBUG]==== SSA block rewrite pass on 10
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const10.0 = const(int, 0)
18:53 [DEBUG]on stmt: $12return_value.1 = cast(value=$const10.0)
18:53 [DEBUG]on stmt: return $12return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 14
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: src_index = const(int, 0)
18:53 [DEBUG]on stmt: dest_index = dest_ndim - src_ndim
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block rewrite pass on 26
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $30compare_op.2 = src_index < src_ndim
18:53 [DEBUG]find_def var='src_index' stmt=$30compare_op.2 = src_index < src_ndim
18:53 [DEBUG]find_def_from_top label 26
18:53 [DEBUG]insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
18:53 [DEBUG]find_def_from_bottom label 102
18:53 [DEBUG]incoming_def src_index.1 = $106inplace_add.2
18:53 [DEBUG]find_def_from_bottom label 14
18:53 [DEBUG]incoming_def src_index = const(int, 0)
18:53 [DEBUG]replaced with: $30compare_op.2 = src_index.2 < src_ndim
18:53 [DEBUG]on stmt: bool32 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $32pred, 34, 120
18:53 [DEBUG]==== SSA block rewrite pass on 34
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
18:53 [DEBUG]find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
18:53 [DEBUG]find_def_from_top label 34
18:53 [DEBUG]idom 26 from label 34
18:53 [DEBUG]find_def_from_bottom label 26
18:53 [DEBUG]replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const52.7 = const(int, 1)
18:53 [DEBUG]on stmt: $54compare_op.8 = dest_dim_size != $const52.7
18:53 [DEBUG]on stmt: bool56 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $56pred, 58, 86
18:53 [DEBUG]==== SSA block rewrite pass on 58
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
18:53 [DEBUG]on stmt: bool64 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $64pred, 66, 102
18:53 [DEBUG]==== SSA block rewrite pass on 66
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const68.1 = const(int, 1)
18:53 [DEBUG]on stmt: $70compare_op.2 = src_dim_size != $const68.1
18:53 [DEBUG]on stmt: bool72 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $72pred, 74, 102
18:53 [DEBUG]==== SSA block rewrite pass on 74
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const76.1 = const(int, 1)
18:53 [DEBUG]on stmt: $78binary_add.2 = dest_index + $const76.1
18:53 [DEBUG]on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
18:53 [DEBUG]on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
18:53 [DEBUG]on stmt: return $82return_value.4
18:53 [DEBUG]==== SSA block rewrite pass on 86
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const88.1 = const(int, 1)
18:53 [DEBUG]on stmt: $90compare_op.2 = src_dim_size != $const88.1
18:53 [DEBUG]on stmt: bool92 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $92pred, 94, 102
18:53 [DEBUG]==== SSA block rewrite pass on 94
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: dest_shape[dest_index] = src_dim_size
18:53 [DEBUG]on stmt: jump 102
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $const104.1 = const(int, 1)
18:53 [DEBUG]on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def var='src_index' stmt=$106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def_from_top label 102
18:53 [DEBUG]idom 34 from label 102
18:53 [DEBUG]find_def_from_bottom label 34
18:53 [DEBUG]find_def_from_top label 34
18:53 [DEBUG]idom 26 from label 34
18:53 [DEBUG]find_def_from_bottom label 26
18:53 [DEBUG]replaced with: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: src_index.1 = $106inplace_add.2
18:53 [DEBUG]on stmt: $const112.4 = const(int, 1)
18:53 [DEBUG]on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: dest_index = $114inplace_add.5
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block rewrite pass on 120
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978bb880>
18:53 [DEBUG]on stmt: $122return_value.1 = cast(value=dest_index)
18:53 [DEBUG]on stmt: return $122return_value.1
18:53 [DEBUG]Fix SSA violator on var dest_index
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: src_ndim = arg(0, name=src_ndim)
18:53 [DEBUG]on stmt: src_shape = arg(1, name=src_shape)
18:53 [DEBUG]on stmt: dest_ndim = arg(2, name=dest_ndim)
18:53 [DEBUG]on stmt: dest_shape = arg(3, name=dest_shape)
18:53 [DEBUG]on stmt: $6compare_op.2 = src_ndim > dest_ndim
18:53 [DEBUG]on stmt: bool8 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $8pred, 10, 14
18:53 [DEBUG]==== SSA block rewrite pass on 10
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: $const10.0 = const(int, 0)
18:53 [DEBUG]on stmt: $12return_value.1 = cast(value=$const10.0)
18:53 [DEBUG]on stmt: return $12return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 14
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: src_index = const(int, 0)
18:53 [DEBUG]on stmt: dest_index = dest_ndim - src_ndim
18:53 [DEBUG]first assign: dest_index
18:53 [DEBUG]replaced with: dest_index = dest_ndim - src_ndim
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block rewrite pass on 26
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:225), Var(src_index, npyimpl.py:209)], incoming_blocks=[102, 14])
18:53 [DEBUG]on stmt: $30compare_op.2 = src_index.2 < src_ndim
18:53 [DEBUG]on stmt: bool32 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $32pred, 34, 120
18:53 [DEBUG]==== SSA block rewrite pass on 34
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const52.7 = const(int, 1)
18:53 [DEBUG]on stmt: $54compare_op.8 = dest_dim_size != $const52.7
18:53 [DEBUG]on stmt: bool56 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $56pred, 58, 86
18:53 [DEBUG]==== SSA block rewrite pass on 58
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
18:53 [DEBUG]on stmt: bool64 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $64pred, 66, 102
18:53 [DEBUG]==== SSA block rewrite pass on 66
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: $const68.1 = const(int, 1)
18:53 [DEBUG]on stmt: $70compare_op.2 = src_dim_size != $const68.1
18:53 [DEBUG]on stmt: bool72 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $72pred, 74, 102
18:53 [DEBUG]==== SSA block rewrite pass on 74
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: $const76.1 = const(int, 1)
18:53 [DEBUG]on stmt: $78binary_add.2 = dest_index + $const76.1
18:53 [DEBUG]on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
18:53 [DEBUG]on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
18:53 [DEBUG]on stmt: return $82return_value.4
18:53 [DEBUG]==== SSA block rewrite pass on 86
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: $const88.1 = const(int, 1)
18:53 [DEBUG]on stmt: $90compare_op.2 = src_dim_size != $const88.1
18:53 [DEBUG]on stmt: bool92 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $92pred, 94, 102
18:53 [DEBUG]==== SSA block rewrite pass on 94
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: dest_shape[dest_index] = src_dim_size
18:53 [DEBUG]on stmt: jump 102
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: $const104.1 = const(int, 1)
18:53 [DEBUG]on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: src_index.1 = $106inplace_add.2
18:53 [DEBUG]on stmt: $const112.4 = const(int, 1)
18:53 [DEBUG]on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: dest_index = $114inplace_add.5
18:53 [DEBUG]replaced with: dest_index.1 = $114inplace_add.5
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block rewrite pass on 120
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff978bb610>
18:53 [DEBUG]on stmt: $122return_value.1 = cast(value=dest_index)
18:53 [DEBUG]on stmt: return $122return_value.1
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0xffff978bb550>],
             102: [<numba.core.ir.Assign object at 0xffff97865460>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: src_ndim = arg(0, name=src_ndim)
18:53 [DEBUG]on stmt: src_shape = arg(1, name=src_shape)
18:53 [DEBUG]on stmt: dest_ndim = arg(2, name=dest_ndim)
18:53 [DEBUG]on stmt: dest_shape = arg(3, name=dest_shape)
18:53 [DEBUG]on stmt: $6compare_op.2 = src_ndim > dest_ndim
18:53 [DEBUG]on stmt: bool8 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:204),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $8pred, 10, 14
18:53 [DEBUG]==== SSA block rewrite pass on 10
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: $const10.0 = const(int, 0)
18:53 [DEBUG]on stmt: $12return_value.1 = cast(value=$const10.0)
18:53 [DEBUG]on stmt: return $12return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 14
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: src_index = const(int, 0)
18:53 [DEBUG]on stmt: dest_index = dest_ndim - src_ndim
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block rewrite pass on 26
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:225), Var(src_index, npyimpl.py:209)], incoming_blocks=[102, 14])
18:53 [DEBUG]on stmt: $30compare_op.2 = src_index.2 < src_ndim
18:53 [DEBUG]on stmt: bool32 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $32pred = call bool32($30compare_op.2, func=bool32, args=(Var($30compare_op.2, npyimpl.py:211),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $32pred, 34, 120
18:53 [DEBUG]==== SSA block rewrite pass on 34
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
18:53 [DEBUG]find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
18:53 [DEBUG]find_def_from_top label 34
18:53 [DEBUG]idom 26 from label 34
18:53 [DEBUG]find_def_from_bottom label 26
18:53 [DEBUG]find_def_from_top label 26
18:53 [DEBUG]insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 26
18:53 [DEBUG]find_def_from_bottom label 102
18:53 [DEBUG]incoming_def dest_index.1 = $114inplace_add.5
18:53 [DEBUG]find_def_from_bottom label 14
18:53 [DEBUG]incoming_def dest_index = dest_ndim - src_ndim
18:53 [DEBUG]replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const52.7 = const(int, 1)
18:53 [DEBUG]on stmt: $54compare_op.8 = dest_dim_size != $const52.7
18:53 [DEBUG]on stmt: bool56 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $56pred = call bool56($54compare_op.8, func=bool56, args=(Var($54compare_op.8, npyimpl.py:216),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $56pred, 58, 86
18:53 [DEBUG]==== SSA block rewrite pass on 58
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: $62compare_op.2 = src_dim_size != dest_dim_size
18:53 [DEBUG]on stmt: bool64 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $64pred = call bool64($62compare_op.2, func=bool64, args=(Var($62compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $64pred, 66, 102
18:53 [DEBUG]==== SSA block rewrite pass on 66
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: $const68.1 = const(int, 1)
18:53 [DEBUG]on stmt: $70compare_op.2 = src_dim_size != $const68.1
18:53 [DEBUG]on stmt: bool72 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $72pred = call bool72($70compare_op.2, func=bool72, args=(Var($70compare_op.2, npyimpl.py:220),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $72pred, 74, 102
18:53 [DEBUG]==== SSA block rewrite pass on 74
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: $const76.1 = const(int, 1)
18:53 [DEBUG]on stmt: $78binary_add.2 = dest_index + $const76.1
18:53 [DEBUG]find_def var='dest_index' stmt=$78binary_add.2 = dest_index + $const76.1
18:53 [DEBUG]find_def_from_top label 74
18:53 [DEBUG]idom 66 from label 74
18:53 [DEBUG]find_def_from_bottom label 66
18:53 [DEBUG]find_def_from_top label 66
18:53 [DEBUG]idom 58 from label 66
18:53 [DEBUG]find_def_from_bottom label 58
18:53 [DEBUG]find_def_from_top label 58
18:53 [DEBUG]idom 34 from label 58
18:53 [DEBUG]find_def_from_bottom label 34
18:53 [DEBUG]find_def_from_top label 34
18:53 [DEBUG]idom 26 from label 34
18:53 [DEBUG]find_def_from_bottom label 26
18:53 [DEBUG]replaced with: $78binary_add.2 = dest_index.2 + $const76.1
18:53 [DEBUG]on stmt: $80unary_negative.3 = unary(fn=<built-in function neg>, value=$78binary_add.2)
18:53 [DEBUG]on stmt: $82return_value.4 = cast(value=$80unary_negative.3)
18:53 [DEBUG]on stmt: return $82return_value.4
18:53 [DEBUG]==== SSA block rewrite pass on 86
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: $const88.1 = const(int, 1)
18:53 [DEBUG]on stmt: $90compare_op.2 = src_dim_size != $const88.1
18:53 [DEBUG]on stmt: bool92 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $92pred = call bool92($90compare_op.2, func=bool92, args=(Var($90compare_op.2, npyimpl.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $92pred, 94, 102
18:53 [DEBUG]==== SSA block rewrite pass on 94
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: dest_shape[dest_index] = src_dim_size
18:53 [DEBUG]find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
18:53 [DEBUG]find_def_from_top label 94
18:53 [DEBUG]idom 86 from label 94
18:53 [DEBUG]find_def_from_bottom label 86
18:53 [DEBUG]find_def_from_top label 86
18:53 [DEBUG]idom 34 from label 86
18:53 [DEBUG]find_def_from_bottom label 34
18:53 [DEBUG]find_def_from_top label 34
18:53 [DEBUG]idom 26 from label 34
18:53 [DEBUG]find_def_from_bottom label 26
18:53 [DEBUG]replaced with: dest_shape[dest_index.2] = src_dim_size
18:53 [DEBUG]on stmt: jump 102
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: $const104.1 = const(int, 1)
18:53 [DEBUG]on stmt: $106inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const104.1, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: src_index.1 = $106inplace_add.2
18:53 [DEBUG]on stmt: $const112.4 = const(int, 1)
18:53 [DEBUG]on stmt: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def var='dest_index' stmt=$114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def_from_top label 102
18:53 [DEBUG]idom 34 from label 102
18:53 [DEBUG]find_def_from_bottom label 34
18:53 [DEBUG]find_def_from_top label 34
18:53 [DEBUG]idom 26 from label 34
18:53 [DEBUG]find_def_from_bottom label 26
18:53 [DEBUG]replaced with: $114inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const112.4, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: dest_index.1 = $114inplace_add.5
18:53 [DEBUG]on stmt: jump 26
18:53 [DEBUG]==== SSA block rewrite pass on 120
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff978d1ee0>
18:53 [DEBUG]on stmt: $122return_value.1 = cast(value=dest_index)
18:53 [DEBUG]find_def var='dest_index' stmt=$122return_value.1 = cast(value=dest_index)
18:53 [DEBUG]find_def_from_top label 120
18:53 [DEBUG]idom 26 from label 120
18:53 [DEBUG]find_def_from_bottom label 26
18:53 [DEBUG]replaced with: $122return_value.1 = cast(value=dest_index.2)
18:53 [DEBUG]on stmt: return $122return_value.1
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=4245)
           2	LOAD_FAST(arg=0, lineno=4248)
           4	LOAD_METHOD(arg=0, lineno=4248)
           6	LOAD_FAST(arg=1, lineno=4248)
           8	LOAD_FAST(arg=2, lineno=4248)
          10	CALL_METHOD(arg=2, lineno=4248)
          12	RETURN_VALUE(arg=None, lineno=4248)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=4245)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4248)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=4248)
18:53 [DEBUG]stack ['$arrtype2.0']
18:53 [DEBUG]dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4248)
18:53 [DEBUG]stack ['$4load_method.1']
18:53 [DEBUG]dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=4248)
18:53 [DEBUG]stack ['$4load_method.1', '$size6.2']
18:53 [DEBUG]dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=4248)
18:53 [DEBUG]stack ['$4load_method.1', '$size6.2', '$align8.3']
18:53 [DEBUG]dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4248)
18:53 [DEBUG]stack ['$10call_method.4']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4245), Var(align, arrayobj.py:4245)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff977b7820>
18:53 [DEBUG]on stmt: arrtype = arg(0, name=arrtype)
18:53 [DEBUG]on stmt: size = arg(1, name=size)
18:53 [DEBUG]on stmt: align = arg(2, name=align)
18:53 [DEBUG]on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
18:53 [DEBUG]on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:4245), Var(align, arrayobj.py:4245)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $12return_value.5 = cast(value=$10call_method.4)
18:53 [DEBUG]on stmt: return $12return_value.5
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0xffff97824d60>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0xffff97824eb0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0xffff97824970>],
             'align': [<numba.core.ir.Assign object at 0xffff978246d0>],
             'arrtype': [<numba.core.ir.Assign object at 0xffff9781d730>],
             'size': [<numba.core.ir.Assign object at 0xffff978245b0>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=4240)
           2	LOAD_GLOBAL(arg=0, lineno=4241)
           4	LOAD_FAST(arg=1, lineno=4241)
           6	LOAD_FAST(arg=2, lineno=4241)
           8	CALL_FUNCTION(arg=2, lineno=4241)
          10	RETURN_VALUE(arg=None, lineno=4241)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=4240)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4241)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=4241)
18:53 [DEBUG]stack ['$2load_global.0']
18:53 [DEBUG]dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=4241)
18:53 [DEBUG]stack ['$2load_global.0', '$allocsize4.1']
18:53 [DEBUG]dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=4241)
18:53 [DEBUG]stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
18:53 [DEBUG]dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=4241)
18:53 [DEBUG]stack ['$8call_function.3']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4240), Var(align, arrayobj.py:4240)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff977b7ac0>
18:53 [DEBUG]on stmt: cls = arg(0, name=cls)
18:53 [DEBUG]on stmt: allocsize = arg(1, name=allocsize)
18:53 [DEBUG]on stmt: align = arg(2, name=align)
18:53 [DEBUG]on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
18:53 [DEBUG]on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:4240), Var(align, arrayobj.py:4240)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $10return_value.4 = cast(value=$8call_function.3)
18:53 [DEBUG]on stmt: return $10return_value.4
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0xffff977c7580>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0xffff977c7040>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0xffff977c7430>],
             'align': [<numba.core.ir.Assign object at 0xffff977b7e80>],
             'allocsize': [<numba.core.ir.Assign object at 0xffff977b7670>],
             'cls': [<numba.core.ir.Assign object at 0xffff977b7220>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=1)
           4	LOAD_GLOBAL(arg=0, lineno=1)
           6	LOAD_FAST(arg=1, lineno=1)
           8	CALL_FUNCTION(arg=1, lineno=1)
          10	BINARY_MULTIPLY(arg=None, lineno=1)
          12	RETURN_VALUE(arg=None, lineno=1)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=1)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_GLOBAL(arg=0, lineno=1)
18:53 [DEBUG]stack ['$r_22.0']
18:53 [DEBUG]dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=1)
18:53 [DEBUG]stack ['$r_22.0', '$4load_global.1']
18:53 [DEBUG]dispatch pc=8, inst=CALL_FUNCTION(arg=1, lineno=1)
18:53 [DEBUG]stack ['$r_22.0', '$4load_global.1', '$theta_26.2']
18:53 [DEBUG]dispatch pc=10, inst=BINARY_MULTIPLY(arg=None, lineno=1)
18:53 [DEBUG]stack ['$r_22.0', '$8call_function.3']
18:53 [DEBUG]dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1)
18:53 [DEBUG]stack ['$10binary_multiply.4']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$r_22.0'}), (4, {'res': '$4load_global.1'}), (6, {'res': '$theta_26.2'}), (8, {'func': '$4load_global.1', 'args': ['$theta_26.2'], 'res': '$8call_function.3'}), (10, {'lhs': '$r_22.0', 'rhs': '$8call_function.3', 'res': '$10binary_multiply.4'}), (12, {'retval': '$10binary_multiply.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    r_2 = arg(0, name=r_2)                   ['r_2']
    theta_2 = arg(1, name=theta_2)           ['theta_2']
    $4load_global.1 = global(__ufunc_or_dufunc_0xffffaeb6764: <ufunc 'sin'>) ['$4load_global.1']
    $8call_function.3 = call $4load_global.1(theta_2, func=$4load_global.1, args=[Var(theta_2, tools.py:1)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.1', '$8call_function.3', 'theta_2']
    $10binary_multiply.4 = r_2 * $8call_function.3 ['$10binary_multiply.4', '$8call_function.3', 'r_2']
    $12return_value.5 = cast(value=$10binary_multiply.4) ['$10binary_multiply.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97785580>
18:53 [DEBUG]on stmt: r_2 = arg(0, name=r_2)
18:53 [DEBUG]on stmt: theta_2 = arg(1, name=theta_2)
18:53 [DEBUG]on stmt: $4load_global.1 = global(__ufunc_or_dufunc_0xffffaeb6764: <ufunc 'sin'>)
18:53 [DEBUG]on stmt: $8call_function.3 = call $4load_global.1(theta_2, func=$4load_global.1, args=[Var(theta_2, tools.py:1)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $10binary_multiply.4 = r_2 * $8call_function.3
18:53 [DEBUG]on stmt: $12return_value.5 = cast(value=$10binary_multiply.4)
18:53 [DEBUG]on stmt: return $12return_value.5
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$10binary_multiply.4': [<numba.core.ir.Assign object at 0xffff9778a4f0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0xffff9778a670>],
             '$4load_global.1': [<numba.core.ir.Assign object at 0xffff9778a0d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0xffff9778a3a0>],
             'r_2': [<numba.core.ir.Assign object at 0xffff977855b0>],
             'theta_2': [<numba.core.ir.Assign object at 0xffff97785700>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=103)
           2	LOAD_FAST(arg=0, lineno=105)
           4	LOAD_METHOD(arg=0, lineno=105)
           6	LOAD_GLOBAL(arg=1, lineno=105)
           8	LOAD_ATTR(arg=2, lineno=105)
          10	CALL_METHOD(arg=1, lineno=105)
          12	STORE_FAST(arg=0, lineno=105)
          14	LOAD_FAST(arg=1, lineno=106)
          16	LOAD_METHOD(arg=0, lineno=106)
          18	LOAD_GLOBAL(arg=1, lineno=106)
          20	LOAD_ATTR(arg=2, lineno=106)
          22	CALL_METHOD(arg=1, lineno=106)
          24	STORE_FAST(arg=1, lineno=106)
          26	LOAD_GLOBAL(arg=1, lineno=107)
          28	LOAD_ATTR(arg=3, lineno=107)
          30	LOAD_METHOD(arg=4, lineno=107)
          32	LOAD_FAST(arg=0, lineno=107)
          34	LOAD_FAST(arg=1, lineno=107)
          36	BINARY_SUBTRACT(arg=None, lineno=107)
          38	CALL_METHOD(arg=1, lineno=107)
          40	RETURN_VALUE(arg=None, lineno=107)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=103)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=105)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=105)
18:53 [DEBUG]stack ['$a2.0']
18:53 [DEBUG]dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=105)
18:53 [DEBUG]stack ['$4load_method.1']
18:53 [DEBUG]dispatch pc=8, inst=LOAD_ATTR(arg=2, lineno=105)
18:53 [DEBUG]stack ['$4load_method.1', '$6load_global.2']
18:53 [DEBUG]dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=105)
18:53 [DEBUG]stack ['$4load_method.1', '$8load_attr.3']
18:53 [DEBUG]dispatch pc=12, inst=STORE_FAST(arg=0, lineno=105)
18:53 [DEBUG]stack ['$10call_method.4']
18:53 [DEBUG]dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=106)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=16, inst=LOAD_METHOD(arg=0, lineno=106)
18:53 [DEBUG]stack ['$b14.5']
18:53 [DEBUG]dispatch pc=18, inst=LOAD_GLOBAL(arg=1, lineno=106)
18:53 [DEBUG]stack ['$16load_method.6']
18:53 [DEBUG]dispatch pc=20, inst=LOAD_ATTR(arg=2, lineno=106)
18:53 [DEBUG]stack ['$16load_method.6', '$18load_global.7']
18:53 [DEBUG]dispatch pc=22, inst=CALL_METHOD(arg=1, lineno=106)
18:53 [DEBUG]stack ['$16load_method.6', '$20load_attr.8']
18:53 [DEBUG]dispatch pc=24, inst=STORE_FAST(arg=1, lineno=106)
18:53 [DEBUG]stack ['$22call_method.9']
18:53 [DEBUG]dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=107)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=28, inst=LOAD_ATTR(arg=3, lineno=107)
18:53 [DEBUG]stack ['$26load_global.10']
18:53 [DEBUG]dispatch pc=30, inst=LOAD_METHOD(arg=4, lineno=107)
18:53 [DEBUG]stack ['$28load_attr.11']
18:53 [DEBUG]dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=107)
18:53 [DEBUG]stack ['$30load_method.12']
18:53 [DEBUG]dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=107)
18:53 [DEBUG]stack ['$30load_method.12', '$a32.13']
18:53 [DEBUG]dispatch pc=36, inst=BINARY_SUBTRACT(arg=None, lineno=107)
18:53 [DEBUG]stack ['$30load_method.12', '$a32.13', '$b34.14']
18:53 [DEBUG]dispatch pc=38, inst=CALL_METHOD(arg=1, lineno=107)
18:53 [DEBUG]stack ['$30load_method.12', '$36binary_subtract.15']
18:53 [DEBUG]dispatch pc=40, inst=RETURN_VALUE(arg=None, lineno=107)
18:53 [DEBUG]stack ['$38call_method.16']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'item': '$a2.0', 'res': '$4load_method.1'}), (6, {'res': '$6load_global.2'}), (8, {'item': '$6load_global.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'value': '$10call_method.4'}), (14, {'res': '$b14.5'}), (16, {'item': '$b14.5', 'res': '$16load_method.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_attr.8'}), (22, {'func': '$16load_method.6', 'args': ['$20load_attr.8'], 'res': '$22call_method.9'}), (24, {'value': '$22call_method.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'item': '$28load_attr.11', 'res': '$30load_method.12'}), (32, {'res': '$a32.13'}), (34, {'res': '$b34.14'}), (36, {'lhs': '$a32.13', 'rhs': '$b34.14', 'res': '$36binary_subtract.15'}), (38, {'func': '$30load_method.12', 'args': ['$36binary_subtract.15'], 'res': '$38call_method.16'}), (40, {'retval': '$38call_method.16', 'castval': '$40return_value.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $4load_method.1 = getattr(value=a, attr=astype) ['$4load_method.1', 'a']
    $6load_global.2 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>) ['$6load_global.2']
    $8load_attr.3 = getattr(value=$6load_global.2, attr=float64) ['$6load_global.2', '$8load_attr.3']
    a.1 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, tools.py:105)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_method.1', '$8load_attr.3', 'a.1']
    $16load_method.6 = getattr(value=b, attr=astype) ['$16load_method.6', 'b']
    $18load_global.7 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>) ['$18load_global.7']
    $20load_attr.8 = getattr(value=$18load_global.7, attr=float64) ['$18load_global.7', '$20load_attr.8']
    b.1 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, tools.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_method.6', '$20load_attr.8', 'b.1']
    $26load_global.10 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>) ['$26load_global.10']
    $28load_attr.11 = getattr(value=$26load_global.10, attr=linalg) ['$26load_global.10', '$28load_attr.11']
    $30load_method.12 = getattr(value=$28load_attr.11, attr=norm) ['$28load_attr.11', '$30load_method.12']
    $36binary_subtract.15 = a.1 - b.1        ['$36binary_subtract.15', 'a.1', 'b.1']
    $38call_method.16 = call $30load_method.12($36binary_subtract.15, func=$30load_method.12, args=[Var($36binary_subtract.15, tools.py:107)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_method.12', '$36binary_subtract.15', '$38call_method.16']
    $40return_value.17 = cast(value=$38call_method.16) ['$38call_method.16', '$40return_value.17']
    return $40return_value.17                ['$40return_value.17']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff979d5100>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $4load_method.1 = getattr(value=a, attr=astype)
18:53 [DEBUG]on stmt: $6load_global.2 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>)
18:53 [DEBUG]on stmt: $8load_attr.3 = getattr(value=$6load_global.2, attr=float64)
18:53 [DEBUG]on stmt: a.1 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, tools.py:105)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $16load_method.6 = getattr(value=b, attr=astype)
18:53 [DEBUG]on stmt: $18load_global.7 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>)
18:53 [DEBUG]on stmt: $20load_attr.8 = getattr(value=$18load_global.7, attr=float64)
18:53 [DEBUG]on stmt: b.1 = call $16load_method.6($20load_attr.8, func=$16load_method.6, args=[Var($20load_attr.8, tools.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $26load_global.10 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>)
18:53 [DEBUG]on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=linalg)
18:53 [DEBUG]on stmt: $30load_method.12 = getattr(value=$28load_attr.11, attr=norm)
18:53 [DEBUG]on stmt: $36binary_subtract.15 = a.1 - b.1
18:53 [DEBUG]on stmt: $38call_method.16 = call $30load_method.12($36binary_subtract.15, func=$30load_method.12, args=[Var($36binary_subtract.15, tools.py:107)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $40return_value.17 = cast(value=$38call_method.16)
18:53 [DEBUG]on stmt: return $40return_value.17
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$16load_method.6': [<numba.core.ir.Assign object at 0xffff976b1730>],
             '$18load_global.7': [<numba.core.ir.Assign object at 0xffff97706a60>],
             '$20load_attr.8': [<numba.core.ir.Assign object at 0xffff97706cd0>],
             '$26load_global.10': [<numba.core.ir.Assign object at 0xffff97706b50>],
             '$28load_attr.11': [<numba.core.ir.Assign object at 0xffff97665280>],
             '$30load_method.12': [<numba.core.ir.Assign object at 0xffff976659a0>],
             '$36binary_subtract.15': [<numba.core.ir.Assign object at 0xffff976656d0>],
             '$38call_method.16': [<numba.core.ir.Assign object at 0xffff97665460>],
             '$40return_value.17': [<numba.core.ir.Assign object at 0xffff97665190>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0xffff976b18b0>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0xffff976b1e50>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0xffff976b1a00>],
             'a': [<numba.core.ir.Assign object at 0xffff97a0fe80>],
             'a.1': [<numba.core.ir.Assign object at 0xffff976b13d0>],
             'b': [<numba.core.ir.Assign object at 0xffff97a0f760>],
             'b.1': [<numba.core.ir.Assign object at 0xffff97706e20>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=2257)
           2	LOAD_GLOBAL(arg=0, lineno=2258)
           4	LOAD_FAST(arg=0, lineno=2258)
           6	CALL_FUNCTION(arg=1, lineno=2258)
           8	RETURN_VALUE(arg=None, lineno=2258)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=2257)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2258)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2258)
18:53 [DEBUG]stack ['$2load_global.0']
18:53 [DEBUG]dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2258)
18:53 [DEBUG]stack ['$2load_global.0', '$x4.1']
18:53 [DEBUG]dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=2258)
18:53 [DEBUG]stack ['$6call_function.2']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$x4.1'}), (6, {'func': '$2load_global.0', 'args': ['$x4.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    x = arg(0, name=x)                       ['x']
    ord = arg(1, name=ord)                   ['ord']
    $2load_global.0 = global(_oneD_norm_2: <function _oneD_norm_2 at 0xffffa4a339d0>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, linalg.py:2257)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'x']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff976f2190>
18:53 [DEBUG]on stmt: x = arg(0, name=x)
18:53 [DEBUG]on stmt: ord = arg(1, name=ord)
18:53 [DEBUG]on stmt: $2load_global.0 = global(_oneD_norm_2: <function _oneD_norm_2 at 0xffffa4a339d0>)
18:53 [DEBUG]on stmt: $6call_function.2 = call $2load_global.0(x, func=$2load_global.0, args=[Var(x, linalg.py:2257)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $8return_value.3 = cast(value=$6call_function.2)
18:53 [DEBUG]on stmt: return $8return_value.3
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0xffff976be970>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0xffff976b1550>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0xffff976b8970>],
             'ord': [<numba.core.ir.Assign object at 0xffff976f22e0>],
             'x': [<numba.core.ir.Assign object at 0xffff976f26a0>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=2201)
           2	LOAD_GLOBAL(arg=0, lineno=2204)
           4	LOAD_FAST(arg=0, lineno=2204)
           6	CALL_FUNCTION(arg=1, lineno=2204)
           8	STORE_FAST(arg=1, lineno=2204)
          10	LOAD_GLOBAL(arg=1, lineno=2206)
          12	LOAD_ATTR(arg=2, lineno=2206)
          14	LOAD_CONST(arg=1, lineno=2206)
          16	LOAD_DEREF(arg=1, lineno=2206)
          18	LOAD_CONST(arg=2, lineno=2206)
          20	CALL_FUNCTION_KW(arg=2, lineno=2206)
          22	STORE_FAST(arg=2, lineno=2206)
          24	LOAD_GLOBAL(arg=3, lineno=2207)
          26	LOAD_FAST(arg=0, lineno=2207)
          28	LOAD_ATTR(arg=4, lineno=2207)
          30	LOAD_CONST(arg=3, lineno=2207)
          32	BINARY_SUBSCR(arg=None, lineno=2207)
          34	LOAD_FAST(arg=0, lineno=2207)
          36	LOAD_ATTR(arg=5, lineno=2207)
          38	BINARY_TRUE_DIVIDE(arg=None, lineno=2207)
          40	CALL_FUNCTION(arg=1, lineno=2207)
          42	STORE_FAST(arg=3, lineno=2207)
          44	LOAD_DEREF(arg=2, lineno=2208)
          46	LOAD_DEREF(arg=0, lineno=2209)
          48	LOAD_FAST(arg=1, lineno=2210)
          50	LOAD_FAST(arg=0, lineno=2211)
          52	LOAD_ATTR(arg=6, lineno=2211)
          54	LOAD_FAST(arg=3, lineno=2212)
          56	LOAD_FAST(arg=2, lineno=2213)
          58	LOAD_ATTR(arg=6, lineno=2213)
          60	CALL_FUNCTION(arg=5, lineno=2208)
          62	STORE_FAST(arg=4, lineno=2208)
          64	LOAD_FAST(arg=4, lineno=2215)
          66	LOAD_CONST(arg=3, lineno=2215)
          68	COMPARE_OP(arg=0, lineno=2215)
          70	POP_JUMP_IF_FALSE(arg=86, lineno=2215)
          72	LOAD_GLOBAL(arg=7, lineno=2216)
          74	CALL_FUNCTION(arg=0, lineno=2216)
          76	POP_TOP(arg=None, lineno=2216)
          78	LOAD_CONST(arg=3, lineno=2217)
          80	POP_JUMP_IF_TRUE(arg=86, lineno=2217)
          82	LOAD_GLOBAL(arg=8, lineno=2217)
          84	RAISE_VARARGS(arg=1, lineno=2217)
>         86	LOAD_GLOBAL(arg=9, lineno=2222)
          88	LOAD_FAST(arg=2, lineno=2222)
          90	LOAD_ATTR(arg=10, lineno=2222)
          92	LOAD_FAST(arg=0, lineno=2222)
          94	LOAD_ATTR(arg=10, lineno=2222)
          96	BUILD_LIST(arg=2, lineno=2222)
          98	CALL_FUNCTION(arg=1, lineno=2222)
         100	POP_TOP(arg=None, lineno=2222)
         102	LOAD_FAST(arg=2, lineno=2223)
         104	LOAD_CONST(arg=3, lineno=2223)
         106	BINARY_SUBSCR(arg=None, lineno=2223)
         108	RETURN_VALUE(arg=None, lineno=2223)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=2201)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2204)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2204)
18:53 [DEBUG]stack ['$2load_global.0']
18:53 [DEBUG]dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=2204)
18:53 [DEBUG]stack ['$2load_global.0', '$a4.1']
18:53 [DEBUG]dispatch pc=8, inst=STORE_FAST(arg=1, lineno=2204)
18:53 [DEBUG]stack ['$6call_function.2']
18:53 [DEBUG]dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=2206)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=2206)
18:53 [DEBUG]stack ['$10load_global.3']
18:53 [DEBUG]dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=2206)
18:53 [DEBUG]stack ['$12load_attr.4']
18:53 [DEBUG]dispatch pc=16, inst=LOAD_DEREF(arg=1, lineno=2206)
18:53 [DEBUG]stack ['$12load_attr.4', '$const14.5']
18:53 [DEBUG]dispatch pc=18, inst=LOAD_CONST(arg=2, lineno=2206)
18:53 [DEBUG]stack ['$12load_attr.4', '$const14.5', '$16load_deref.6']
18:53 [DEBUG]dispatch pc=20, inst=CALL_FUNCTION_KW(arg=2, lineno=2206)
18:53 [DEBUG]stack ['$12load_attr.4', '$const14.5', '$16load_deref.6', '$const18.7']
18:53 [DEBUG]dispatch pc=22, inst=STORE_FAST(arg=2, lineno=2206)
18:53 [DEBUG]stack ['$20call_function_kw.8']
18:53 [DEBUG]dispatch pc=24, inst=LOAD_GLOBAL(arg=3, lineno=2207)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=2207)
18:53 [DEBUG]stack ['$24load_global.9']
18:53 [DEBUG]dispatch pc=28, inst=LOAD_ATTR(arg=4, lineno=2207)
18:53 [DEBUG]stack ['$24load_global.9', '$a26.10']
18:53 [DEBUG]dispatch pc=30, inst=LOAD_CONST(arg=3, lineno=2207)
18:53 [DEBUG]stack ['$24load_global.9', '$28load_attr.11']
18:53 [DEBUG]dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=2207)
18:53 [DEBUG]stack ['$24load_global.9', '$28load_attr.11', '$const30.12']
18:53 [DEBUG]dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=2207)
18:53 [DEBUG]stack ['$24load_global.9', '$32binary_subscr.13']
18:53 [DEBUG]dispatch pc=36, inst=LOAD_ATTR(arg=5, lineno=2207)
18:53 [DEBUG]stack ['$24load_global.9', '$32binary_subscr.13', '$a34.14']
18:53 [DEBUG]dispatch pc=38, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=2207)
18:53 [DEBUG]stack ['$24load_global.9', '$32binary_subscr.13', '$36load_attr.15']
18:53 [DEBUG]dispatch pc=40, inst=CALL_FUNCTION(arg=1, lineno=2207)
18:53 [DEBUG]stack ['$24load_global.9', '$38binary_true_divide.16']
18:53 [DEBUG]dispatch pc=42, inst=STORE_FAST(arg=3, lineno=2207)
18:53 [DEBUG]stack ['$40call_function.17']
18:53 [DEBUG]dispatch pc=44, inst=LOAD_DEREF(arg=2, lineno=2208)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=46, inst=LOAD_DEREF(arg=0, lineno=2209)
18:53 [DEBUG]stack ['$44load_deref.18']
18:53 [DEBUG]dispatch pc=48, inst=LOAD_FAST(arg=1, lineno=2210)
18:53 [DEBUG]stack ['$44load_deref.18', '$46load_deref.19']
18:53 [DEBUG]dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=2211)
18:53 [DEBUG]stack ['$44load_deref.18', '$46load_deref.19', '$n48.20']
18:53 [DEBUG]dispatch pc=52, inst=LOAD_ATTR(arg=6, lineno=2211)
18:53 [DEBUG]stack ['$44load_deref.18', '$46load_deref.19', '$n48.20', '$a50.21']
18:53 [DEBUG]dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=2212)
18:53 [DEBUG]stack ['$44load_deref.18', '$46load_deref.19', '$n48.20', '$52load_attr.22']
18:53 [DEBUG]dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=2213)
18:53 [DEBUG]stack ['$44load_deref.18', '$46load_deref.19', '$n48.20', '$52load_attr.22', '$jmp54.23']
18:53 [DEBUG]dispatch pc=58, inst=LOAD_ATTR(arg=6, lineno=2213)
18:53 [DEBUG]stack ['$44load_deref.18', '$46load_deref.19', '$n48.20', '$52load_attr.22', '$jmp54.23', '$ret56.24']
18:53 [DEBUG]dispatch pc=60, inst=CALL_FUNCTION(arg=5, lineno=2208)
18:53 [DEBUG]stack ['$44load_deref.18', '$46load_deref.19', '$n48.20', '$52load_attr.22', '$jmp54.23', '$58load_attr.25']
18:53 [DEBUG]dispatch pc=62, inst=STORE_FAST(arg=4, lineno=2208)
18:53 [DEBUG]stack ['$60call_function.26']
18:53 [DEBUG]dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=2215)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=66, inst=LOAD_CONST(arg=3, lineno=2215)
18:53 [DEBUG]stack ['$r64.27']
18:53 [DEBUG]dispatch pc=68, inst=COMPARE_OP(arg=0, lineno=2215)
18:53 [DEBUG]stack ['$r64.27', '$const66.28']
18:53 [DEBUG]dispatch pc=70, inst=POP_JUMP_IF_FALSE(arg=86, lineno=2215)
18:53 [DEBUG]stack ['$68compare_op.29']
18:53 [DEBUG]end state. edges=[Edge(pc=72, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=72 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=72 nstack_initial=0)
18:53 [DEBUG]dispatch pc=72, inst=LOAD_GLOBAL(arg=7, lineno=2216)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=74, inst=CALL_FUNCTION(arg=0, lineno=2216)
18:53 [DEBUG]stack ['$72load_global.0']
18:53 [DEBUG]dispatch pc=76, inst=POP_TOP(arg=None, lineno=2216)
18:53 [DEBUG]stack ['$74call_function.1']
18:53 [DEBUG]dispatch pc=78, inst=LOAD_CONST(arg=3, lineno=2217)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=80, inst=POP_JUMP_IF_TRUE(arg=86, lineno=2217)
18:53 [DEBUG]stack ['$const78.2']
18:53 [DEBUG]end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=86 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=86 nstack_initial=0)
18:53 [DEBUG]dispatch pc=86, inst=LOAD_GLOBAL(arg=9, lineno=2222)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=2222)
18:53 [DEBUG]stack ['$86load_global.0']
18:53 [DEBUG]dispatch pc=90, inst=LOAD_ATTR(arg=10, lineno=2222)
18:53 [DEBUG]stack ['$86load_global.0', '$ret88.1']
18:53 [DEBUG]dispatch pc=92, inst=LOAD_FAST(arg=0, lineno=2222)
18:53 [DEBUG]stack ['$86load_global.0', '$90load_attr.2']
18:53 [DEBUG]dispatch pc=94, inst=LOAD_ATTR(arg=10, lineno=2222)
18:53 [DEBUG]stack ['$86load_global.0', '$90load_attr.2', '$a92.3']
18:53 [DEBUG]dispatch pc=96, inst=BUILD_LIST(arg=2, lineno=2222)
18:53 [DEBUG]stack ['$86load_global.0', '$90load_attr.2', '$94load_attr.4']
18:53 [DEBUG]dispatch pc=98, inst=CALL_FUNCTION(arg=1, lineno=2222)
18:53 [DEBUG]stack ['$86load_global.0', '$96build_list.5']
18:53 [DEBUG]dispatch pc=100, inst=POP_TOP(arg=None, lineno=2222)
18:53 [DEBUG]stack ['$98call_function.6']
18:53 [DEBUG]dispatch pc=102, inst=LOAD_FAST(arg=2, lineno=2223)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=104, inst=LOAD_CONST(arg=3, lineno=2223)
18:53 [DEBUG]stack ['$ret102.7']
18:53 [DEBUG]dispatch pc=106, inst=BINARY_SUBSCR(arg=None, lineno=2223)
18:53 [DEBUG]stack ['$ret102.7', '$const104.8']
18:53 [DEBUG]dispatch pc=108, inst=RETURN_VALUE(arg=None, lineno=2223)
18:53 [DEBUG]stack ['$106binary_subscr.9']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=82 nstack_initial=0)
18:53 [DEBUG]dispatch pc=82, inst=LOAD_GLOBAL(arg=8, lineno=2217)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=2217)
18:53 [DEBUG]stack ['$82load_global.0']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]pending: deque([State(pc_initial=86 nstack_initial=0)])
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$a4.1'}), (6, {'func': '$2load_global.0', 'args': ['$a4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'item': '$10load_global.3', 'res': '$12load_attr.4'}), (14, {'res': '$const14.5'}), (16, {'res': '$16load_deref.6'}), (18, {'res': '$const18.7'}), (20, {'func': '$12load_attr.4', 'args': ['$const14.5', '$16load_deref.6'], 'names': '$const18.7', 'res': '$20call_function_kw.8'}), (22, {'value': '$20call_function_kw.8'}), (24, {'res': '$24load_global.9'}), (26, {'res': '$a26.10'}), (28, {'item': '$a26.10', 'res': '$28load_attr.11'}), (30, {'res': '$const30.12'}), (32, {'index': '$const30.12', 'target': '$28load_attr.11', 'res': '$32binary_subscr.13'}), (34, {'res': '$a34.14'}), (36, {'item': '$a34.14', 'res': '$36load_attr.15'}), (38, {'lhs': '$32binary_subscr.13', 'rhs': '$36load_attr.15', 'res': '$38binary_true_divide.16'}), (40, {'func': '$24load_global.9', 'args': ['$38binary_true_divide.16'], 'res': '$40call_function.17'}), (42, {'value': '$40call_function.17'}), (44, {'res': '$44load_deref.18'}), (46, {'res': '$46load_deref.19'}), (48, {'res': '$n48.20'}), (50, {'res': '$a50.21'}), (52, {'item': '$a50.21', 'res': '$52load_attr.22'}), (54, {'res': '$jmp54.23'}), (56, {'res': '$ret56.24'}), (58, {'item': '$ret56.24', 'res': '$58load_attr.25'}), (60, {'func': '$44load_deref.18', 'args': ['$46load_deref.19', '$n48.20', '$52load_attr.22', '$jmp54.23', '$58load_attr.25'], 'res': '$60call_function.26'}), (62, {'value': '$60call_function.26'}), (64, {'res': '$r64.27'}), (66, {'res': '$const66.28'}), (68, {'lhs': '$r64.27', 'rhs': '$const66.28', 'res': '$68compare_op.29'}), (70, {'pred': '$68compare_op.29'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={72: (), 86: ()})
18:53 [DEBUG]block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'res': '$72load_global.0'}), (74, {'func': '$72load_global.0', 'args': [], 'res': '$74call_function.1'}), (78, {'res': '$const78.2'}), (80, {'pred': '$const78.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 86: ()})
18:53 [DEBUG]block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$82load_global.0'}), (84, {'exc': '$82load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$86load_global.0'}), (88, {'res': '$ret88.1'}), (90, {'item': '$ret88.1', 'res': '$90load_attr.2'}), (92, {'res': '$a92.3'}), (94, {'item': '$a92.3', 'res': '$94load_attr.4'}), (96, {'items': ['$90load_attr.2', '$94load_attr.4'], 'res': '$96build_list.5'}), (98, {'func': '$86load_global.0', 'args': ['$96build_list.5'], 'res': '$98call_function.6'}), (102, {'res': '$ret102.7'}), (104, {'res': '$const104.8'}), (106, {'index': '$const104.8', 'target': '$ret102.7', 'res': '$106binary_subscr.9'}), (108, {'retval': '$106binary_subscr.9', 'castval': '$108return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    a = arg(0, name=a)                       ['a']
    $2load_global.0 = global(len: <built-in function len>) ['$2load_global.0']
    n = call $2load_global.0(a, func=$2load_global.0, args=[Var(a, linalg.py:2201)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', 'a', 'n']
    $10load_global.3 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>) ['$10load_global.3']
    $12load_attr.4 = getattr(value=$10load_global.3, attr=empty) ['$10load_global.3', '$12load_attr.4']
    $const_1 = const(int, 1)                 ['$const_1']
    $const14.5 = build_tuple(items=[Var($const_1, linalg.py:2206)]) ['$const14.5', '$const_1']
    $16load_deref.6 = freevar(np_ret_type: float64) ['$16load_deref.6']
    ret = call $12load_attr.4($const14.5, func=$12load_attr.4, args=[Var($const14.5, linalg.py:2206)], kws=[('dtype', Var($16load_deref.6, linalg.py:2206))], vararg=None, varkwarg=None, target=None) ['$12load_attr.4', '$16load_deref.6', '$const14.5', 'ret']
    $24load_global.9 = global(int: <class 'int'>) ['$24load_global.9']
    $28load_attr.11 = getattr(value=a, attr=strides) ['$28load_attr.11', 'a']
    $const30.12 = const(int, 0)              ['$const30.12']
    $32binary_subscr.13 = getitem(value=$28load_attr.11, index=$const30.12, fn=<built-in function getitem>) ['$28load_attr.11', '$32binary_subscr.13', '$const30.12']
    $36load_attr.15 = getattr(value=a, attr=itemsize) ['$36load_attr.15', 'a']
    $38binary_true_divide.16 = $32binary_subscr.13 / $36load_attr.15 ['$32binary_subscr.13', '$36load_attr.15', '$38binary_true_divide.16']
    jmp = call $24load_global.9($38binary_true_divide.16, func=$24load_global.9, args=[Var($38binary_true_divide.16, linalg.py:2207)], kws=(), vararg=None, varkwarg=None, target=None) ['$24load_global.9', '$38binary_true_divide.16', 'jmp']
    $44load_deref.18 = freevar(xxnrm2: ExternalFunction(numba_xxnrm2)) ['$44load_deref.18']
    $46load_deref.19 = freevar(kind: 100)    ['$46load_deref.19']
    $52load_attr.22 = getattr(value=a, attr=ctypes) ['$52load_attr.22', 'a']
    $58load_attr.25 = getattr(value=ret, attr=ctypes) ['$58load_attr.25', 'ret']
    r = call $44load_deref.18($46load_deref.19, n, $52load_attr.22, jmp, $58load_attr.25, func=$44load_deref.18, args=[Var($46load_deref.19, linalg.py:2209), Var(n, linalg.py:2204), Var($52load_attr.22, linalg.py:2211), Var(jmp, linalg.py:2207), Var($58load_attr.25, linalg.py:2213)], kws=(), vararg=None, varkwarg=None, target=None) ['$44load_deref.18', '$46load_deref.19', '$52load_attr.22', '$58load_attr.25', 'jmp', 'n', 'r']
    $const66.28 = const(int, 0)              ['$const66.28']
    $68compare_op.29 = r < $const66.28       ['$68compare_op.29', '$const66.28', 'r']
    bool70 = global(bool: <class 'bool'>)    ['bool70']
    $70pred = call bool70($68compare_op.29, func=bool70, args=(Var($68compare_op.29, linalg.py:2215),), kws=(), vararg=None, varkwarg=None, target=None) ['$68compare_op.29', '$70pred', 'bool70']
    branch $70pred, 72, 86                   ['$70pred']
label 72:
    $72load_global.0 = global(fatal_error_func: ExternalFunction(numba_fatal_error)) ['$72load_global.0']
    $74call_function.1 = call $72load_global.0(func=$72load_global.0, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.0', '$74call_function.1']
    $const78.2 = const(int, 0)               ['$const78.2']
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80($const78.2, func=bool80, args=(Var($const78.2, linalg.py:2217),), kws=(), vararg=None, varkwarg=None, target=None) ['$80pred', '$const78.2', 'bool80']
    branch $80pred, 86, 82                   ['$80pred']
label 82:
    $82load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$82load_global.0']
    raise $82load_global.0                   ['$82load_global.0']
label 86:
    $86load_global.0 = global(_dummy_liveness_func: <function _dummy_liveness_func at 0xffffa4a295e0>) ['$86load_global.0']
    $90load_attr.2 = getattr(value=ret, attr=size) ['$90load_attr.2', 'ret']
    $94load_attr.4 = getattr(value=a, attr=size) ['$94load_attr.4', 'a']
    $96build_list.5 = build_list(items=[Var($90load_attr.2, linalg.py:2222), Var($94load_attr.4, linalg.py:2222)]) ['$90load_attr.2', '$94load_attr.4', '$96build_list.5']
    $98call_function.6 = call $86load_global.0($96build_list.5, func=$86load_global.0, args=[Var($96build_list.5, linalg.py:2222)], kws=(), vararg=None, varkwarg=None, target=None) ['$86load_global.0', '$96build_list.5', '$98call_function.6']
    $const104.8 = const(int, 0)              ['$const104.8']
    $106binary_subscr.9 = getitem(value=ret, index=$const104.8, fn=<built-in function getitem>) ['$106binary_subscr.9', '$const104.8', 'ret']
    $108return_value.10 = cast(value=$106binary_subscr.9) ['$106binary_subscr.9', '$108return_value.10']
    return $108return_value.10               ['$108return_value.10']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97706f40>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: $2load_global.0 = global(len: <built-in function len>)
18:53 [DEBUG]on stmt: n = call $2load_global.0(a, func=$2load_global.0, args=[Var(a, linalg.py:2201)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $10load_global.3 = global(np: <module 'numpy' from '/usr/local/lib/python3.8/dist-packages/numpy/__init__.py'>)
18:53 [DEBUG]on stmt: $12load_attr.4 = getattr(value=$10load_global.3, attr=empty)
18:53 [DEBUG]on stmt: $const_1 = const(int, 1)
18:53 [DEBUG]on stmt: $const14.5 = build_tuple(items=[Var($const_1, linalg.py:2206)])
18:53 [DEBUG]on stmt: $16load_deref.6 = freevar(np_ret_type: float64)
18:53 [DEBUG]on stmt: ret = call $12load_attr.4($const14.5, func=$12load_attr.4, args=[Var($const14.5, linalg.py:2206)], kws=[('dtype', Var($16load_deref.6, linalg.py:2206))], vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $24load_global.9 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $28load_attr.11 = getattr(value=a, attr=strides)
18:53 [DEBUG]on stmt: $const30.12 = const(int, 0)
18:53 [DEBUG]on stmt: $32binary_subscr.13 = static_getitem(value=$28load_attr.11, index=0, index_var=$const30.12, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $36load_attr.15 = getattr(value=a, attr=itemsize)
18:53 [DEBUG]on stmt: $38binary_true_divide.16 = $32binary_subscr.13 / $36load_attr.15
18:53 [DEBUG]on stmt: jmp = call $24load_global.9($38binary_true_divide.16, func=$24load_global.9, args=[Var($38binary_true_divide.16, linalg.py:2207)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $44load_deref.18 = freevar(xxnrm2: ExternalFunction(numba_xxnrm2))
18:53 [DEBUG]on stmt: $46load_deref.19 = freevar(kind: 100)
18:53 [DEBUG]on stmt: $52load_attr.22 = getattr(value=a, attr=ctypes)
18:53 [DEBUG]on stmt: $58load_attr.25 = getattr(value=ret, attr=ctypes)
18:53 [DEBUG]on stmt: r = call $44load_deref.18($46load_deref.19, n, $52load_attr.22, jmp, $58load_attr.25, func=$44load_deref.18, args=[Var($46load_deref.19, linalg.py:2209), Var(n, linalg.py:2204), Var($52load_attr.22, linalg.py:2211), Var(jmp, linalg.py:2207), Var($58load_attr.25, linalg.py:2213)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $const66.28 = const(int, 0)
18:53 [DEBUG]on stmt: $68compare_op.29 = r < $const66.28
18:53 [DEBUG]on stmt: bool70 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $70pred = call bool70($68compare_op.29, func=bool70, args=(Var($68compare_op.29, linalg.py:2215),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $70pred, 72, 86
18:53 [DEBUG]==== SSA block analysis pass on 72
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97706f40>
18:53 [DEBUG]on stmt: $72load_global.0 = global(fatal_error_func: ExternalFunction(numba_fatal_error))
18:53 [DEBUG]on stmt: $74call_function.1 = call $72load_global.0(func=$72load_global.0, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $const78.2 = const(int, 0)
18:53 [DEBUG]on stmt: bool80 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $80pred = call bool80($const78.2, func=bool80, args=(Var($const78.2, linalg.py:2217),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 82
18:53 [DEBUG]==== SSA block analysis pass on 82
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97706f40>
18:53 [DEBUG]on stmt: $82load_global.0 = global(AssertionError: <class 'AssertionError'>)
18:53 [DEBUG]on stmt: <static> raise <class 'AssertionError'>
18:53 [DEBUG]==== SSA block analysis pass on 86
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97706f40>
18:53 [DEBUG]on stmt: $86load_global.0 = global(_dummy_liveness_func: <function _dummy_liveness_func at 0xffffa4a295e0>)
18:53 [DEBUG]on stmt: $90load_attr.2 = getattr(value=ret, attr=size)
18:53 [DEBUG]on stmt: $94load_attr.4 = getattr(value=a, attr=size)
18:53 [DEBUG]on stmt: $96build_list.5 = build_list(items=[Var($90load_attr.2, linalg.py:2222), Var($94load_attr.4, linalg.py:2222)])
18:53 [DEBUG]on stmt: $98call_function.6 = call $86load_global.0($96build_list.5, func=$86load_global.0, args=[Var($96build_list.5, linalg.py:2222)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $const104.8 = const(int, 0)
18:53 [DEBUG]on stmt: $106binary_subscr.9 = static_getitem(value=ret, index=0, index_var=$const104.8, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $108return_value.10 = cast(value=$106binary_subscr.9)
18:53 [DEBUG]on stmt: return $108return_value.10
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$106binary_subscr.9': [<numba.core.ir.Assign object at 0xffff976be4f0>],
             '$108return_value.10': [<numba.core.ir.Assign object at 0xffff9765d9a0>],
             '$10load_global.3': [<numba.core.ir.Assign object at 0xffff976bdc10>],
             '$12load_attr.4': [<numba.core.ir.Assign object at 0xffff976bdd90>],
             '$16load_deref.6': [<numba.core.ir.Assign object at 0xffff976611f0>],
             '$24load_global.9': [<numba.core.ir.Assign object at 0xffff976617f0>],
             '$28load_attr.11': [<numba.core.ir.Assign object at 0xffff97661a90>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0xffff976bd3d0>],
             '$32binary_subscr.13': [<numba.core.ir.Assign object at 0xffff9765dac0>],
             '$36load_attr.15': [<numba.core.ir.Assign object at 0xffff97660070>],
             '$38binary_true_divide.16': [<numba.core.ir.Assign object at 0xffff976601f0>],
             '$44load_deref.18': [<numba.core.ir.Assign object at 0xffff97660610>],
             '$46load_deref.19': [<numba.core.ir.Assign object at 0xffff97660790>],
             '$52load_attr.22': [<numba.core.ir.Assign object at 0xffff97660b50>],
             '$58load_attr.25': [<numba.core.ir.Assign object at 0xffff97660f10>],
             '$68compare_op.29': [<numba.core.ir.Assign object at 0xffff976598e0>],
             '$70pred': [<numba.core.ir.Assign object at 0xffff97659670>],
             '$72load_global.0': [<numba.core.ir.Assign object at 0xffff976608e0>],
             '$74call_function.1': [<numba.core.ir.Assign object at 0xffff976a9400>],
             '$80pred': [<numba.core.ir.Assign object at 0xffff97659100>],
             '$82load_global.0': [<numba.core.ir.Assign object at 0xffff97659df0>],
             '$86load_global.0': [<numba.core.ir.Assign object at 0xffff976bd760>],
             '$90load_attr.2': [<numba.core.ir.Assign object at 0xffff977c6550>],
             '$94load_attr.4': [<numba.core.ir.Assign object at 0xffff9765d100>],
             '$96build_list.5': [<numba.core.ir.Assign object at 0xffff9765d2b0>],
             '$98call_function.6': [<numba.core.ir.Assign object at 0xffff9765d430>],
             '$const104.8': [<numba.core.ir.Assign object at 0xffff9765d6a0>],
             '$const14.5': [<numba.core.ir.Assign object at 0xffff97661070>],
             '$const30.12': [<numba.core.ir.Assign object at 0xffff97661c10>],
             '$const66.28': [<numba.core.ir.Assign object at 0xffff976598b0>],
             '$const78.2': [<numba.core.ir.Assign object at 0xffff976594f0>],
             '$const_1': [<numba.core.ir.Assign object at 0xffff976bdf40>],
             'a': [<numba.core.ir.Assign object at 0xffff976bd550>],
             'bool70': [<numba.core.ir.Assign object at 0xffff97659760>],
             'bool80': [<numba.core.ir.Assign object at 0xffff97659af0>],
             'jmp': [<numba.core.ir.Assign object at 0xffff976603a0>],
             'n': [<numba.core.ir.Assign object at 0xffff976bd940>],
             'r': [<numba.core.ir.Assign object at 0xffff97659fa0>],
             'ret': [<numba.core.ir.Assign object at 0xffff976616a0>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=4369)
           2	LOAD_GLOBAL(arg=0, lineno=4370)
           4	LOAD_FAST(arg=0, lineno=4370)
           6	LOAD_FAST(arg=1, lineno=4370)
           8	LOAD_DEREF(arg=0, lineno=4370)
          10	CALL_FUNCTION(arg=3, lineno=4370)
          12	RETURN_VALUE(arg=None, lineno=4370)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=4369)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4370)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4370)
18:53 [DEBUG]stack ['$2load_global.0']
18:53 [DEBUG]dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4370)
18:53 [DEBUG]stack ['$2load_global.0', '$shape4.1']
18:53 [DEBUG]dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4370)
18:53 [DEBUG]stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
18:53 [DEBUG]dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4370)
18:53 [DEBUG]stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
18:53 [DEBUG]dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4370)
18:53 [DEBUG]stack ['$10call_function.4']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
    $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
    $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4369), Var(dtype, arrayobj.py:4369), Var($8load_deref.3, arrayobj.py:4370)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff9764afd0>
18:53 [DEBUG]on stmt: shape = arg(0, name=shape)
18:53 [DEBUG]on stmt: dtype = arg(1, name=dtype)
18:53 [DEBUG]on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
18:53 [DEBUG]on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
18:53 [DEBUG]on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4369), Var(dtype, arrayobj.py:4369), Var($8load_deref.3, arrayobj.py:4370)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $12return_value.5 = cast(value=$10call_function.4)
18:53 [DEBUG]on stmt: return $12return_value.5
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0xffff97639550>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0xffff97639af0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0xffff97646040>],
             '$8load_deref.3': [<numba.core.ir.Assign object at 0xffff97639100>],
             'dtype': [<numba.core.ir.Assign object at 0xffff97646160>],
             'shape': [<numba.core.ir.Assign object at 0xffff97646640>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=902)
           2	LOAD_FAST(arg=0, lineno=905)
           4	LOAD_CONST(arg=1, lineno=905)
           6	BINARY_SUBSCR(arg=None, lineno=905)
           8	RETURN_VALUE(arg=None, lineno=905)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=902)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=905)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=905)
18:53 [DEBUG]stack ['$a2.0']
18:53 [DEBUG]dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=905)
18:53 [DEBUG]stack ['$a2.0', '$const4.1']
18:53 [DEBUG]dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=905)
18:53 [DEBUG]stack ['$6binary_subscr.2']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$a2.0', 'res': '$6binary_subscr.2'}), (8, {'retval': '$6binary_subscr.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    a = arg(0, name=a)                       ['a']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=a, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'a']
    $8return_value.3 = cast(value=$6binary_subscr.2) ['$6binary_subscr.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff975a1850>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $8return_value.3 = cast(value=$6binary_subscr.2)
18:53 [DEBUG]on stmt: return $8return_value.3
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$6binary_subscr.2': [<numba.core.ir.Assign object at 0xffff975a03a0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0xffff975a02e0>],
             '$const4.1': [<numba.core.ir.Assign object at 0xffff975a1fa0>],
             'a': [<numba.core.ir.Assign object at 0xffff975a14c0>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_FAST(arg=0, lineno=1)
           4	LOAD_FAST(arg=1, lineno=1)
           6	BINARY_SUBTRACT(arg=None, lineno=1)
           8	RETURN_VALUE(arg=None, lineno=1)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=1)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=1)
18:53 [DEBUG]stack ['$a_1_12.0']
18:53 [DEBUG]dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=1)
18:53 [DEBUG]stack ['$a_1_12.0', '$b_1_14.1']
18:53 [DEBUG]dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1)
18:53 [DEBUG]stack ['$6binary_subtract.2']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>, {})
18:53 [DEBUG]keep phismap: {}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>, {})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a_1_12.0'}), (4, {'res': '$b_1_14.1'}), (6, {'lhs': '$a_1_12.0', 'rhs': '$b_1_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    a_1_1 = arg(0, name=a_1_1)               ['a_1_1']
    b_1_1 = arg(1, name=b_1_1)               ['b_1_1']
    $6binary_subtract.2 = a_1_1 - b_1_1      ['$6binary_subtract.2', 'a_1_1', 'b_1_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff977675e0>
18:53 [DEBUG]on stmt: a_1_1 = arg(0, name=a_1_1)
18:53 [DEBUG]on stmt: b_1_1 = arg(1, name=b_1_1)
18:53 [DEBUG]on stmt: $6binary_subtract.2 = a_1_1 - b_1_1
18:53 [DEBUG]on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
18:53 [DEBUG]on stmt: return $8return_value.3
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0xffff977c79a0>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0xffff977c7dc0>],
             'a_1_1': [<numba.core.ir.Assign object at 0xffff97767580>],
             'b_1_1': [<numba.core.ir.Assign object at 0xffff97767160>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=62)
           2	LOAD_FAST(arg=0, lineno=64)
           4	LOAD_CONST(arg=1, lineno=64)
           6	BINARY_SUBSCR(arg=None, lineno=64)
           8	LOAD_FAST(arg=0, lineno=64)
          10	LOAD_CONST(arg=2, lineno=64)
          12	BINARY_SUBSCR(arg=None, lineno=64)
          14	LOAD_FAST(arg=1, lineno=64)
          16	LOAD_CONST(arg=1, lineno=64)
          18	BINARY_SUBSCR(arg=None, lineno=64)
          20	LOAD_FAST(arg=1, lineno=64)
          22	LOAD_CONST(arg=2, lineno=64)
          24	BINARY_SUBSCR(arg=None, lineno=64)
          26	BUILD_TUPLE(arg=4, lineno=64)
          28	UNPACK_SEQUENCE(arg=4, lineno=64)
          30	STORE_FAST(arg=2, lineno=64)
          32	STORE_FAST(arg=3, lineno=64)
          34	STORE_FAST(arg=4, lineno=64)
          36	STORE_FAST(arg=5, lineno=64)
          38	BUILD_LIST(arg=0, lineno=65)
          40	STORE_FAST(arg=6, lineno=65)
          42	LOAD_GLOBAL(arg=0, lineno=66)
          44	LOAD_FAST(arg=5, lineno=66)
          46	LOAD_FAST(arg=3, lineno=66)
          48	BINARY_SUBTRACT(arg=None, lineno=66)
          50	CALL_FUNCTION(arg=1, lineno=66)
          52	LOAD_GLOBAL(arg=0, lineno=66)
          54	LOAD_FAST(arg=4, lineno=66)
          56	LOAD_FAST(arg=2, lineno=66)
          58	BINARY_SUBTRACT(arg=None, lineno=66)
          60	CALL_FUNCTION(arg=1, lineno=66)
          62	COMPARE_OP(arg=4, lineno=66)
          64	STORE_FAST(arg=7, lineno=66)
          66	LOAD_FAST(arg=7, lineno=67)
          68	POP_JUMP_IF_FALSE(arg=90, lineno=67)
          70	LOAD_FAST(arg=3, lineno=68)
          72	LOAD_FAST(arg=2, lineno=68)
          74	ROT_TWO(arg=None, lineno=68)
          76	STORE_FAST(arg=2, lineno=68)
          78	STORE_FAST(arg=3, lineno=68)
          80	LOAD_FAST(arg=5, lineno=69)
          82	LOAD_FAST(arg=4, lineno=69)
          84	ROT_TWO(arg=None, lineno=69)
          86	STORE_FAST(arg=4, lineno=69)
          88	STORE_FAST(arg=5, lineno=69)
>         90	LOAD_CONST(arg=3, lineno=70)
          92	STORE_FAST(arg=8, lineno=70)
          94	LOAD_FAST(arg=2, lineno=71)
          96	LOAD_FAST(arg=4, lineno=71)
          98	COMPARE_OP(arg=4, lineno=71)
         100	POP_JUMP_IF_FALSE(arg=126, lineno=71)
         102	LOAD_FAST(arg=4, lineno=72)
         104	LOAD_FAST(arg=2, lineno=72)
         106	ROT_TWO(arg=None, lineno=72)
         108	STORE_FAST(arg=2, lineno=72)
         110	STORE_FAST(arg=4, lineno=72)
         112	LOAD_FAST(arg=5, lineno=73)
         114	LOAD_FAST(arg=3, lineno=73)
         116	ROT_TWO(arg=None, lineno=73)
         118	STORE_FAST(arg=3, lineno=73)
         120	STORE_FAST(arg=5, lineno=73)
         122	LOAD_CONST(arg=4, lineno=74)
         124	STORE_FAST(arg=8, lineno=74)
>        126	LOAD_FAST(arg=4, lineno=75)
         128	LOAD_FAST(arg=2, lineno=75)
         130	BINARY_SUBTRACT(arg=None, lineno=75)
         132	STORE_FAST(arg=9, lineno=75)
         134	LOAD_GLOBAL(arg=0, lineno=76)
         136	LOAD_FAST(arg=5, lineno=76)
         138	LOAD_FAST(arg=3, lineno=76)
         140	BINARY_SUBTRACT(arg=None, lineno=76)
         142	CALL_FUNCTION(arg=1, lineno=76)
         144	STORE_FAST(arg=10, lineno=76)
         146	LOAD_GLOBAL(arg=1, lineno=77)
         148	LOAD_FAST(arg=9, lineno=77)
         150	LOAD_CONST(arg=5, lineno=77)
         152	BINARY_TRUE_DIVIDE(arg=None, lineno=77)
         154	CALL_FUNCTION(arg=1, lineno=77)
         156	STORE_FAST(arg=11, lineno=77)
         158	LOAD_FAST(arg=3, lineno=78)
         160	STORE_FAST(arg=12, lineno=78)
         162	LOAD_CONST(arg=0, lineno=79)
         164	STORE_FAST(arg=13, lineno=79)
         166	LOAD_FAST(arg=3, lineno=80)
         168	LOAD_FAST(arg=5, lineno=80)
         170	COMPARE_OP(arg=0, lineno=80)
         172	POP_JUMP_IF_FALSE(arg=180, lineno=80)
         174	LOAD_CONST(arg=2, lineno=81)
         176	STORE_FAST(arg=13, lineno=81)
         178	JUMP_FORWARD(arg=4, lineno=81)
>        180	LOAD_CONST(arg=6, lineno=83)
         182	STORE_FAST(arg=13, lineno=83)
>        184	LOAD_GLOBAL(arg=2, lineno=84)
         186	LOAD_FAST(arg=2, lineno=84)
         188	LOAD_FAST(arg=4, lineno=84)
         190	LOAD_CONST(arg=2, lineno=84)
         192	BINARY_ADD(arg=None, lineno=84)
         194	CALL_FUNCTION(arg=2, lineno=84)
         196	GET_ITER(arg=None, lineno=84)
>        198	FOR_ITER(arg=70, lineno=84)
         200	STORE_FAST(arg=14, lineno=84)
         202	LOAD_FAST(arg=7, lineno=85)
         204	POP_JUMP_IF_FALSE(arg=222, lineno=85)
         206	LOAD_FAST(arg=6, lineno=86)
         208	LOAD_METHOD(arg=3, lineno=86)
         210	LOAD_FAST(arg=12, lineno=86)
         212	LOAD_FAST(arg=14, lineno=86)
         214	BUILD_TUPLE(arg=2, lineno=86)
         216	CALL_METHOD(arg=1, lineno=86)
         218	POP_TOP(arg=None, lineno=86)
         220	JUMP_FORWARD(arg=14, lineno=86)
>        222	LOAD_FAST(arg=6, lineno=88)
         224	LOAD_METHOD(arg=3, lineno=88)
         226	LOAD_FAST(arg=14, lineno=88)
         228	LOAD_FAST(arg=12, lineno=88)
         230	BUILD_TUPLE(arg=2, lineno=88)
         232	CALL_METHOD(arg=1, lineno=88)
         234	POP_TOP(arg=None, lineno=88)
>        236	LOAD_FAST(arg=11, lineno=89)
         238	LOAD_FAST(arg=10, lineno=89)
         240	INPLACE_SUBTRACT(arg=None, lineno=89)
         242	STORE_FAST(arg=11, lineno=89)
         244	LOAD_FAST(arg=11, lineno=90)
         246	LOAD_CONST(arg=1, lineno=90)
         248	COMPARE_OP(arg=0, lineno=90)
         250	POP_JUMP_IF_FALSE(arg=198, lineno=90)
         252	LOAD_FAST(arg=12, lineno=91)
         254	LOAD_FAST(arg=13, lineno=91)
         256	INPLACE_ADD(arg=None, lineno=91)
         258	STORE_FAST(arg=12, lineno=91)
         260	LOAD_FAST(arg=11, lineno=92)
         262	LOAD_FAST(arg=9, lineno=92)
         264	INPLACE_ADD(arg=None, lineno=92)
         266	STORE_FAST(arg=11, lineno=92)
         268	JUMP_ABSOLUTE(arg=198, lineno=92)
>        270	LOAD_FAST(arg=8, lineno=94)
         272	NOP(arg=1, lineno=94)
         274	POP_JUMP_IF_FALSE(arg=284, lineno=94)
         276	LOAD_FAST(arg=6, lineno=95)
         278	LOAD_METHOD(arg=4, lineno=95)
         280	CALL_METHOD(arg=0, lineno=95)
         282	POP_TOP(arg=None, lineno=95)
>        284	LOAD_FAST(arg=6, lineno=96)
         286	RETURN_VALUE(arg=None, lineno=96)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=62)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=64)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=64)
18:53 [DEBUG]stack ['$a2.0']
18:53 [DEBUG]dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=64)
18:53 [DEBUG]stack ['$a2.0', '$const4.1']
18:53 [DEBUG]dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2']
18:53 [DEBUG]dispatch pc=10, inst=LOAD_CONST(arg=2, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$a8.3']
18:53 [DEBUG]dispatch pc=12, inst=BINARY_SUBSCR(arg=None, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$a8.3', '$const10.4']
18:53 [DEBUG]dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$12binary_subscr.5']
18:53 [DEBUG]dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$12binary_subscr.5', '$b14.6']
18:53 [DEBUG]dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$12binary_subscr.5', '$b14.6', '$const16.7']
18:53 [DEBUG]dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$12binary_subscr.5', '$18binary_subscr.8']
18:53 [DEBUG]dispatch pc=22, inst=LOAD_CONST(arg=2, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$12binary_subscr.5', '$18binary_subscr.8', '$b20.9']
18:53 [DEBUG]dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$12binary_subscr.5', '$18binary_subscr.8', '$b20.9', '$const22.10']
18:53 [DEBUG]dispatch pc=26, inst=BUILD_TUPLE(arg=4, lineno=64)
18:53 [DEBUG]stack ['$6binary_subscr.2', '$12binary_subscr.5', '$18binary_subscr.8', '$24binary_subscr.11']
18:53 [DEBUG]dispatch pc=28, inst=UNPACK_SEQUENCE(arg=4, lineno=64)
18:53 [DEBUG]stack ['$26build_tuple.12']
18:53 [DEBUG]dispatch pc=30, inst=STORE_FAST(arg=2, lineno=64)
18:53 [DEBUG]stack ['$28unpack_sequence.16', '$28unpack_sequence.15', '$28unpack_sequence.14', '$28unpack_sequence.13']
18:53 [DEBUG]dispatch pc=32, inst=STORE_FAST(arg=3, lineno=64)
18:53 [DEBUG]stack ['$28unpack_sequence.16', '$28unpack_sequence.15', '$28unpack_sequence.14']
18:53 [DEBUG]dispatch pc=34, inst=STORE_FAST(arg=4, lineno=64)
18:53 [DEBUG]stack ['$28unpack_sequence.16', '$28unpack_sequence.15']
18:53 [DEBUG]dispatch pc=36, inst=STORE_FAST(arg=5, lineno=64)
18:53 [DEBUG]stack ['$28unpack_sequence.16']
18:53 [DEBUG]dispatch pc=38, inst=BUILD_LIST(arg=0, lineno=65)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=40, inst=STORE_FAST(arg=6, lineno=65)
18:53 [DEBUG]stack ['$38build_list.18']
18:53 [DEBUG]dispatch pc=42, inst=LOAD_GLOBAL(arg=0, lineno=66)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=66)
18:53 [DEBUG]stack ['$42load_global.19']
18:53 [DEBUG]dispatch pc=46, inst=LOAD_FAST(arg=3, lineno=66)
18:53 [DEBUG]stack ['$42load_global.19', '$y244.20']
18:53 [DEBUG]dispatch pc=48, inst=BINARY_SUBTRACT(arg=None, lineno=66)
18:53 [DEBUG]stack ['$42load_global.19', '$y244.20', '$y146.21']
18:53 [DEBUG]dispatch pc=50, inst=CALL_FUNCTION(arg=1, lineno=66)
18:53 [DEBUG]stack ['$42load_global.19', '$48binary_subtract.22']
18:53 [DEBUG]dispatch pc=52, inst=LOAD_GLOBAL(arg=0, lineno=66)
18:53 [DEBUG]stack ['$50call_function.23']
18:53 [DEBUG]dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=66)
18:53 [DEBUG]stack ['$50call_function.23', '$52load_global.24']
18:53 [DEBUG]dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=66)
18:53 [DEBUG]stack ['$50call_function.23', '$52load_global.24', '$x254.25']
18:53 [DEBUG]dispatch pc=58, inst=BINARY_SUBTRACT(arg=None, lineno=66)
18:53 [DEBUG]stack ['$50call_function.23', '$52load_global.24', '$x254.25', '$x156.26']
18:53 [DEBUG]dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=66)
18:53 [DEBUG]stack ['$50call_function.23', '$52load_global.24', '$58binary_subtract.27']
18:53 [DEBUG]dispatch pc=62, inst=COMPARE_OP(arg=4, lineno=66)
18:53 [DEBUG]stack ['$50call_function.23', '$60call_function.28']
18:53 [DEBUG]dispatch pc=64, inst=STORE_FAST(arg=7, lineno=66)
18:53 [DEBUG]stack ['$62compare_op.29']
18:53 [DEBUG]dispatch pc=66, inst=LOAD_FAST(arg=7, lineno=67)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=90, lineno=67)
18:53 [DEBUG]stack ['$issteep66.30']
18:53 [DEBUG]end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=90, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=70 nstack_initial=0)
18:53 [DEBUG]dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=68)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=72, inst=LOAD_FAST(arg=2, lineno=68)
18:53 [DEBUG]stack ['$y170.0']
18:53 [DEBUG]dispatch pc=74, inst=ROT_TWO(arg=None, lineno=68)
18:53 [DEBUG]stack ['$y170.0', '$x172.1']
18:53 [DEBUG]dispatch pc=76, inst=STORE_FAST(arg=2, lineno=68)
18:53 [DEBUG]stack ['$x172.1', '$y170.0']
18:53 [DEBUG]dispatch pc=78, inst=STORE_FAST(arg=3, lineno=68)
18:53 [DEBUG]stack ['$x172.1']
18:53 [DEBUG]dispatch pc=80, inst=LOAD_FAST(arg=5, lineno=69)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=82, inst=LOAD_FAST(arg=4, lineno=69)
18:53 [DEBUG]stack ['$y280.2']
18:53 [DEBUG]dispatch pc=84, inst=ROT_TWO(arg=None, lineno=69)
18:53 [DEBUG]stack ['$y280.2', '$x282.3']
18:53 [DEBUG]dispatch pc=86, inst=STORE_FAST(arg=4, lineno=69)
18:53 [DEBUG]stack ['$x282.3', '$y280.2']
18:53 [DEBUG]dispatch pc=88, inst=STORE_FAST(arg=5, lineno=69)
18:53 [DEBUG]stack ['$x282.3']
18:53 [DEBUG]end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=90 nstack_initial=0)
18:53 [DEBUG]dispatch pc=90, inst=LOAD_CONST(arg=3, lineno=70)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=92, inst=STORE_FAST(arg=8, lineno=70)
18:53 [DEBUG]stack ['$const90.0']
18:53 [DEBUG]dispatch pc=94, inst=LOAD_FAST(arg=2, lineno=71)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=96, inst=LOAD_FAST(arg=4, lineno=71)
18:53 [DEBUG]stack ['$x194.1']
18:53 [DEBUG]dispatch pc=98, inst=COMPARE_OP(arg=4, lineno=71)
18:53 [DEBUG]stack ['$x194.1', '$x296.2']
18:53 [DEBUG]dispatch pc=100, inst=POP_JUMP_IF_FALSE(arg=126, lineno=71)
18:53 [DEBUG]stack ['$98compare_op.3']
18:53 [DEBUG]end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=126, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
18:53 [DEBUG]pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=102 nstack_initial=0)
18:53 [DEBUG]dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=72)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=104, inst=LOAD_FAST(arg=2, lineno=72)
18:53 [DEBUG]stack ['$x2102.0']
18:53 [DEBUG]dispatch pc=106, inst=ROT_TWO(arg=None, lineno=72)
18:53 [DEBUG]stack ['$x2102.0', '$x1104.1']
18:53 [DEBUG]dispatch pc=108, inst=STORE_FAST(arg=2, lineno=72)
18:53 [DEBUG]stack ['$x1104.1', '$x2102.0']
18:53 [DEBUG]dispatch pc=110, inst=STORE_FAST(arg=4, lineno=72)
18:53 [DEBUG]stack ['$x1104.1']
18:53 [DEBUG]dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=73)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=114, inst=LOAD_FAST(arg=3, lineno=73)
18:53 [DEBUG]stack ['$y2112.2']
18:53 [DEBUG]dispatch pc=116, inst=ROT_TWO(arg=None, lineno=73)
18:53 [DEBUG]stack ['$y2112.2', '$y1114.3']
18:53 [DEBUG]dispatch pc=118, inst=STORE_FAST(arg=3, lineno=73)
18:53 [DEBUG]stack ['$y1114.3', '$y2112.2']
18:53 [DEBUG]dispatch pc=120, inst=STORE_FAST(arg=5, lineno=73)
18:53 [DEBUG]stack ['$y1114.3']
18:53 [DEBUG]dispatch pc=122, inst=LOAD_CONST(arg=4, lineno=74)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=124, inst=STORE_FAST(arg=8, lineno=74)
18:53 [DEBUG]stack ['$const122.4']
18:53 [DEBUG]end state. edges=[Edge(pc=126, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=126 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=126 nstack_initial=0)
18:53 [DEBUG]dispatch pc=126, inst=LOAD_FAST(arg=4, lineno=75)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=128, inst=LOAD_FAST(arg=2, lineno=75)
18:53 [DEBUG]stack ['$x2126.0']
18:53 [DEBUG]dispatch pc=130, inst=BINARY_SUBTRACT(arg=None, lineno=75)
18:53 [DEBUG]stack ['$x2126.0', '$x1128.1']
18:53 [DEBUG]dispatch pc=132, inst=STORE_FAST(arg=9, lineno=75)
18:53 [DEBUG]stack ['$130binary_subtract.2']
18:53 [DEBUG]dispatch pc=134, inst=LOAD_GLOBAL(arg=0, lineno=76)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=136, inst=LOAD_FAST(arg=5, lineno=76)
18:53 [DEBUG]stack ['$134load_global.3']
18:53 [DEBUG]dispatch pc=138, inst=LOAD_FAST(arg=3, lineno=76)
18:53 [DEBUG]stack ['$134load_global.3', '$y2136.4']
18:53 [DEBUG]dispatch pc=140, inst=BINARY_SUBTRACT(arg=None, lineno=76)
18:53 [DEBUG]stack ['$134load_global.3', '$y2136.4', '$y1138.5']
18:53 [DEBUG]dispatch pc=142, inst=CALL_FUNCTION(arg=1, lineno=76)
18:53 [DEBUG]stack ['$134load_global.3', '$140binary_subtract.6']
18:53 [DEBUG]dispatch pc=144, inst=STORE_FAST(arg=10, lineno=76)
18:53 [DEBUG]stack ['$142call_function.7']
18:53 [DEBUG]dispatch pc=146, inst=LOAD_GLOBAL(arg=1, lineno=77)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=148, inst=LOAD_FAST(arg=9, lineno=77)
18:53 [DEBUG]stack ['$146load_global.8']
18:53 [DEBUG]dispatch pc=150, inst=LOAD_CONST(arg=5, lineno=77)
18:53 [DEBUG]stack ['$146load_global.8', '$deltax148.9']
18:53 [DEBUG]dispatch pc=152, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=77)
18:53 [DEBUG]stack ['$146load_global.8', '$deltax148.9', '$const150.10']
18:53 [DEBUG]dispatch pc=154, inst=CALL_FUNCTION(arg=1, lineno=77)
18:53 [DEBUG]stack ['$146load_global.8', '$152binary_true_divide.11']
18:53 [DEBUG]dispatch pc=156, inst=STORE_FAST(arg=11, lineno=77)
18:53 [DEBUG]stack ['$154call_function.12']
18:53 [DEBUG]dispatch pc=158, inst=LOAD_FAST(arg=3, lineno=78)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=160, inst=STORE_FAST(arg=12, lineno=78)
18:53 [DEBUG]stack ['$y1158.13']
18:53 [DEBUG]dispatch pc=162, inst=LOAD_CONST(arg=0, lineno=79)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=164, inst=STORE_FAST(arg=13, lineno=79)
18:53 [DEBUG]stack ['$const162.14']
18:53 [DEBUG]dispatch pc=166, inst=LOAD_FAST(arg=3, lineno=80)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=168, inst=LOAD_FAST(arg=5, lineno=80)
18:53 [DEBUG]stack ['$y1166.15']
18:53 [DEBUG]dispatch pc=170, inst=COMPARE_OP(arg=0, lineno=80)
18:53 [DEBUG]stack ['$y1166.15', '$y2168.16']
18:53 [DEBUG]dispatch pc=172, inst=POP_JUMP_IF_FALSE(arg=180, lineno=80)
18:53 [DEBUG]stack ['$170compare_op.17']
18:53 [DEBUG]end state. edges=[Edge(pc=174, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=126 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
18:53 [DEBUG]pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=174 nstack_initial=0)
18:53 [DEBUG]dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=81)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=176, inst=STORE_FAST(arg=13, lineno=81)
18:53 [DEBUG]stack ['$const174.0']
18:53 [DEBUG]dispatch pc=178, inst=JUMP_FORWARD(arg=4, lineno=81)
18:53 [DEBUG]stack []
18:53 [DEBUG]end state. edges=[Edge(pc=184, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=180 nstack_initial=0)
18:53 [DEBUG]dispatch pc=180, inst=LOAD_CONST(arg=6, lineno=83)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=182, inst=STORE_FAST(arg=13, lineno=83)
18:53 [DEBUG]stack ['$const180.0']
18:53 [DEBUG]end state. edges=[Edge(pc=184, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=184 nstack_initial=0)
18:53 [DEBUG]dispatch pc=184, inst=LOAD_GLOBAL(arg=2, lineno=84)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=186, inst=LOAD_FAST(arg=2, lineno=84)
18:53 [DEBUG]stack ['$184load_global.0']
18:53 [DEBUG]dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=84)
18:53 [DEBUG]stack ['$184load_global.0', '$x1186.1']
18:53 [DEBUG]dispatch pc=190, inst=LOAD_CONST(arg=2, lineno=84)
18:53 [DEBUG]stack ['$184load_global.0', '$x1186.1', '$x2188.2']
18:53 [DEBUG]dispatch pc=192, inst=BINARY_ADD(arg=None, lineno=84)
18:53 [DEBUG]stack ['$184load_global.0', '$x1186.1', '$x2188.2', '$const190.3']
18:53 [DEBUG]dispatch pc=194, inst=CALL_FUNCTION(arg=2, lineno=84)
18:53 [DEBUG]stack ['$184load_global.0', '$x1186.1', '$192binary_add.4']
18:53 [DEBUG]dispatch pc=196, inst=GET_ITER(arg=None, lineno=84)
18:53 [DEBUG]stack ['$194call_function.5']
18:53 [DEBUG]end state. edges=[Edge(pc=198, stack=('$196get_iter.6',), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=198 nstack_initial=1)])
18:53 [DEBUG]pending: deque([State(pc_initial=198 nstack_initial=1)])
18:53 [DEBUG]stack: ['$phi198.0']
18:53 [DEBUG]state.pc_initial: State(pc_initial=198 nstack_initial=1)
18:53 [DEBUG]dispatch pc=198, inst=FOR_ITER(arg=70, lineno=84)
18:53 [DEBUG]stack ['$phi198.0']
18:53 [DEBUG]end state. edges=[Edge(pc=270, stack=(), blockstack=(), npush=0), Edge(pc=200, stack=('$phi198.0', '$198for_iter.2'), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=270 nstack_initial=0), State(pc_initial=200 nstack_initial=2)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=270 nstack_initial=0)
18:53 [DEBUG]dispatch pc=270, inst=LOAD_FAST(arg=8, lineno=94)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=272, inst=NOP(arg=1, lineno=94)
18:53 [DEBUG]stack ['$rev270.0']
18:53 [DEBUG]dispatch pc=274, inst=POP_JUMP_IF_FALSE(arg=284, lineno=94)
18:53 [DEBUG]stack ['$rev270.0']
18:53 [DEBUG]end state. edges=[Edge(pc=276, stack=(), blockstack=(), npush=0), Edge(pc=284, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=200 nstack_initial=2), State(pc_initial=276 nstack_initial=0), State(pc_initial=284 nstack_initial=0)])
18:53 [DEBUG]stack: ['$phi200.0', '$phi200.1']
18:53 [DEBUG]state.pc_initial: State(pc_initial=200 nstack_initial=2)
18:53 [DEBUG]dispatch pc=200, inst=STORE_FAST(arg=14, lineno=84)
18:53 [DEBUG]stack ['$phi200.0', '$phi200.1']
18:53 [DEBUG]dispatch pc=202, inst=LOAD_FAST(arg=7, lineno=85)
18:53 [DEBUG]stack ['$phi200.0']
18:53 [DEBUG]dispatch pc=204, inst=POP_JUMP_IF_FALSE(arg=222, lineno=85)
18:53 [DEBUG]stack ['$phi200.0', '$issteep202.2']
18:53 [DEBUG]end state. edges=[Edge(pc=206, stack=('$phi200.0',), blockstack=(), npush=0), Edge(pc=222, stack=('$phi200.0',), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=276 nstack_initial=0), State(pc_initial=284 nstack_initial=0), State(pc_initial=206 nstack_initial=1), State(pc_initial=222 nstack_initial=1)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=276 nstack_initial=0)
18:53 [DEBUG]dispatch pc=276, inst=LOAD_FAST(arg=6, lineno=95)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=278, inst=LOAD_METHOD(arg=4, lineno=95)
18:53 [DEBUG]stack ['$points276.0']
18:53 [DEBUG]dispatch pc=280, inst=CALL_METHOD(arg=0, lineno=95)
18:53 [DEBUG]stack ['$278load_method.1']
18:53 [DEBUG]dispatch pc=282, inst=POP_TOP(arg=None, lineno=95)
18:53 [DEBUG]stack ['$280call_method.2']
18:53 [DEBUG]end state. edges=[Edge(pc=284, stack=(), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=284 nstack_initial=0), State(pc_initial=206 nstack_initial=1), State(pc_initial=222 nstack_initial=1), State(pc_initial=284 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=284 nstack_initial=0)
18:53 [DEBUG]dispatch pc=284, inst=LOAD_FAST(arg=6, lineno=96)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=286, inst=RETURN_VALUE(arg=None, lineno=96)
18:53 [DEBUG]stack ['$points284.0']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]pending: deque([State(pc_initial=206 nstack_initial=1), State(pc_initial=222 nstack_initial=1), State(pc_initial=284 nstack_initial=0)])
18:53 [DEBUG]stack: ['$phi206.0']
18:53 [DEBUG]state.pc_initial: State(pc_initial=206 nstack_initial=1)
18:53 [DEBUG]dispatch pc=206, inst=LOAD_FAST(arg=6, lineno=86)
18:53 [DEBUG]stack ['$phi206.0']
18:53 [DEBUG]dispatch pc=208, inst=LOAD_METHOD(arg=3, lineno=86)
18:53 [DEBUG]stack ['$phi206.0', '$points206.1']
18:53 [DEBUG]dispatch pc=210, inst=LOAD_FAST(arg=12, lineno=86)
18:53 [DEBUG]stack ['$phi206.0', '$208load_method.2']
18:53 [DEBUG]dispatch pc=212, inst=LOAD_FAST(arg=14, lineno=86)
18:53 [DEBUG]stack ['$phi206.0', '$208load_method.2', '$y210.3']
18:53 [DEBUG]dispatch pc=214, inst=BUILD_TUPLE(arg=2, lineno=86)
18:53 [DEBUG]stack ['$phi206.0', '$208load_method.2', '$y210.3', '$x212.4']
18:53 [DEBUG]dispatch pc=216, inst=CALL_METHOD(arg=1, lineno=86)
18:53 [DEBUG]stack ['$phi206.0', '$208load_method.2', '$214build_tuple.5']
18:53 [DEBUG]dispatch pc=218, inst=POP_TOP(arg=None, lineno=86)
18:53 [DEBUG]stack ['$phi206.0', '$216call_method.6']
18:53 [DEBUG]dispatch pc=220, inst=JUMP_FORWARD(arg=14, lineno=86)
18:53 [DEBUG]stack ['$phi206.0']
18:53 [DEBUG]end state. edges=[Edge(pc=236, stack=('$phi206.0',), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=222 nstack_initial=1), State(pc_initial=284 nstack_initial=0), State(pc_initial=236 nstack_initial=1)])
18:53 [DEBUG]stack: ['$phi222.0']
18:53 [DEBUG]state.pc_initial: State(pc_initial=222 nstack_initial=1)
18:53 [DEBUG]dispatch pc=222, inst=LOAD_FAST(arg=6, lineno=88)
18:53 [DEBUG]stack ['$phi222.0']
18:53 [DEBUG]dispatch pc=224, inst=LOAD_METHOD(arg=3, lineno=88)
18:53 [DEBUG]stack ['$phi222.0', '$points222.1']
18:53 [DEBUG]dispatch pc=226, inst=LOAD_FAST(arg=14, lineno=88)
18:53 [DEBUG]stack ['$phi222.0', '$224load_method.2']
18:53 [DEBUG]dispatch pc=228, inst=LOAD_FAST(arg=12, lineno=88)
18:53 [DEBUG]stack ['$phi222.0', '$224load_method.2', '$x226.3']
18:53 [DEBUG]dispatch pc=230, inst=BUILD_TUPLE(arg=2, lineno=88)
18:53 [DEBUG]stack ['$phi222.0', '$224load_method.2', '$x226.3', '$y228.4']
18:53 [DEBUG]dispatch pc=232, inst=CALL_METHOD(arg=1, lineno=88)
18:53 [DEBUG]stack ['$phi222.0', '$224load_method.2', '$230build_tuple.5']
18:53 [DEBUG]dispatch pc=234, inst=POP_TOP(arg=None, lineno=88)
18:53 [DEBUG]stack ['$phi222.0', '$232call_method.6']
18:53 [DEBUG]end state. edges=[Edge(pc=236, stack=('$phi222.0',), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=284 nstack_initial=0), State(pc_initial=236 nstack_initial=1), State(pc_initial=236 nstack_initial=1)])
18:53 [DEBUG]pending: deque([State(pc_initial=236 nstack_initial=1), State(pc_initial=236 nstack_initial=1)])
18:53 [DEBUG]stack: ['$phi236.0']
18:53 [DEBUG]state.pc_initial: State(pc_initial=236 nstack_initial=1)
18:53 [DEBUG]dispatch pc=236, inst=LOAD_FAST(arg=11, lineno=89)
18:53 [DEBUG]stack ['$phi236.0']
18:53 [DEBUG]dispatch pc=238, inst=LOAD_FAST(arg=10, lineno=89)
18:53 [DEBUG]stack ['$phi236.0', '$error236.1']
18:53 [DEBUG]dispatch pc=240, inst=INPLACE_SUBTRACT(arg=None, lineno=89)
18:53 [DEBUG]stack ['$phi236.0', '$error236.1', '$deltay238.2']
18:53 [DEBUG]dispatch pc=242, inst=STORE_FAST(arg=11, lineno=89)
18:53 [DEBUG]stack ['$phi236.0', '$240inplace_subtract.3']
18:53 [DEBUG]dispatch pc=244, inst=LOAD_FAST(arg=11, lineno=90)
18:53 [DEBUG]stack ['$phi236.0']
18:53 [DEBUG]dispatch pc=246, inst=LOAD_CONST(arg=1, lineno=90)
18:53 [DEBUG]stack ['$phi236.0', '$error244.4']
18:53 [DEBUG]dispatch pc=248, inst=COMPARE_OP(arg=0, lineno=90)
18:53 [DEBUG]stack ['$phi236.0', '$error244.4', '$const246.5']
18:53 [DEBUG]dispatch pc=250, inst=POP_JUMP_IF_FALSE(arg=198, lineno=90)
18:53 [DEBUG]stack ['$phi236.0', '$248compare_op.6']
18:53 [DEBUG]end state. edges=[Edge(pc=252, stack=('$phi236.0',), blockstack=(), npush=0), Edge(pc=198, stack=('$phi236.0',), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=236 nstack_initial=1), State(pc_initial=252 nstack_initial=1), State(pc_initial=198 nstack_initial=1)])
18:53 [DEBUG]pending: deque([State(pc_initial=252 nstack_initial=1), State(pc_initial=198 nstack_initial=1)])
18:53 [DEBUG]stack: ['$phi252.0']
18:53 [DEBUG]state.pc_initial: State(pc_initial=252 nstack_initial=1)
18:53 [DEBUG]dispatch pc=252, inst=LOAD_FAST(arg=12, lineno=91)
18:53 [DEBUG]stack ['$phi252.0']
18:53 [DEBUG]dispatch pc=254, inst=LOAD_FAST(arg=13, lineno=91)
18:53 [DEBUG]stack ['$phi252.0', '$y252.1']
18:53 [DEBUG]dispatch pc=256, inst=INPLACE_ADD(arg=None, lineno=91)
18:53 [DEBUG]stack ['$phi252.0', '$y252.1', '$ystep254.2']
18:53 [DEBUG]dispatch pc=258, inst=STORE_FAST(arg=12, lineno=91)
18:53 [DEBUG]stack ['$phi252.0', '$256inplace_add.3']
18:53 [DEBUG]dispatch pc=260, inst=LOAD_FAST(arg=11, lineno=92)
18:53 [DEBUG]stack ['$phi252.0']
18:53 [DEBUG]dispatch pc=262, inst=LOAD_FAST(arg=9, lineno=92)
18:53 [DEBUG]stack ['$phi252.0', '$error260.4']
18:53 [DEBUG]dispatch pc=264, inst=INPLACE_ADD(arg=None, lineno=92)
18:53 [DEBUG]stack ['$phi252.0', '$error260.4', '$deltax262.5']
18:53 [DEBUG]dispatch pc=266, inst=STORE_FAST(arg=11, lineno=92)
18:53 [DEBUG]stack ['$phi252.0', '$264inplace_add.6']
18:53 [DEBUG]dispatch pc=268, inst=JUMP_ABSOLUTE(arg=198, lineno=92)
18:53 [DEBUG]stack ['$phi252.0']
18:53 [DEBUG]end state. edges=[Edge(pc=198, stack=('$phi252.0',), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=198 nstack_initial=1), State(pc_initial=198 nstack_initial=1)])
18:53 [DEBUG]pending: deque([State(pc_initial=198 nstack_initial=1)])
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=126 nstack_initial=0): set(),
             State(pc_initial=174 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set(),
             State(pc_initial=198 nstack_initial=1): {'$phi198.0'},
             State(pc_initial=200 nstack_initial=2): {'$phi200.1'},
             State(pc_initial=206 nstack_initial=1): set(),
             State(pc_initial=222 nstack_initial=1): set(),
             State(pc_initial=236 nstack_initial=1): set(),
             State(pc_initial=252 nstack_initial=1): set(),
             State(pc_initial=270 nstack_initial=0): set(),
             State(pc_initial=276 nstack_initial=0): set(),
             State(pc_initial=284 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {'$phi198.0': State(pc_initial=184 nstack_initial=0),
 '$phi200.1': State(pc_initial=198 nstack_initial=1)}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>,
            {'$phi198.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0)),
                           ('$phi236.0',
                            State(pc_initial=236 nstack_initial=1)),
                           ('$phi252.0',
                            State(pc_initial=252 nstack_initial=1))},
             '$phi200.0': {('$phi198.0',
                            State(pc_initial=198 nstack_initial=1))},
             '$phi200.1': {('$198for_iter.2',
                            State(pc_initial=198 nstack_initial=1))},
             '$phi206.0': {('$phi200.0',
                            State(pc_initial=200 nstack_initial=2))},
             '$phi222.0': {('$phi200.0',
                            State(pc_initial=200 nstack_initial=2))},
             '$phi236.0': {('$phi206.0',
                            State(pc_initial=206 nstack_initial=1)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=1))},
             '$phi252.0': {('$phi236.0',
                            State(pc_initial=236 nstack_initial=1))}})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>,
            {'$phi198.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0)),
                           ('$phi206.0',
                            State(pc_initial=206 nstack_initial=1)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=1))},
             '$phi200.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0)),
                           ('$phi206.0',
                            State(pc_initial=206 nstack_initial=1)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=1))},
             '$phi200.1': {('$198for_iter.2',
                            State(pc_initial=198 nstack_initial=1))},
             '$phi206.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0)),
                           ('$phi206.0',
                            State(pc_initial=206 nstack_initial=1)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=1))},
             '$phi222.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0)),
                           ('$phi206.0',
                            State(pc_initial=206 nstack_initial=1)),
                           ('$phi222.0',
                            State(pc_initial=222 nstack_initial=1))},
             '$phi236.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi252.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))}})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>,
            {'$phi198.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi200.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi200.1': {('$198for_iter.2',
                            State(pc_initial=198 nstack_initial=1))},
             '$phi206.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi222.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi236.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi252.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))}})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>,
            {'$phi198.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi200.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi200.1': {('$198for_iter.2',
                            State(pc_initial=198 nstack_initial=1))},
             '$phi206.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi222.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi236.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))},
             '$phi252.0': {('$196get_iter.6',
                            State(pc_initial=184 nstack_initial=0))}})
18:53 [DEBUG]keep phismap: {'$phi198.0': {('$196get_iter.6', State(pc_initial=184 nstack_initial=0))},
 '$phi200.1': {('$198for_iter.2', State(pc_initial=198 nstack_initial=1))}}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=184 nstack_initial=0): {'$phi198.0': '$196get_iter.6'},
             State(pc_initial=198 nstack_initial=1): {'$phi200.1': '$198for_iter.2'}})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$a2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$a8.3'}), (10, {'res': '$const10.4'}), (12, {'index': '$const10.4', 'target': '$a8.3', 'res': '$12binary_subscr.5'}), (14, {'res': '$b14.6'}), (16, {'res': '$const16.7'}), (18, {'index': '$const16.7', 'target': '$b14.6', 'res': '$18binary_subscr.8'}), (20, {'res': '$b20.9'}), (22, {'res': '$const22.10'}), (24, {'index': '$const22.10', 'target': '$b20.9', 'res': '$24binary_subscr.11'}), (26, {'items': ['$6binary_subscr.2', '$12binary_subscr.5', '$18binary_subscr.8', '$24binary_subscr.11'], 'res': '$26build_tuple.12'}), (28, {'iterable': '$26build_tuple.12', 'stores': ['$28unpack_sequence.13', '$28unpack_sequence.14', '$28unpack_sequence.15', '$28unpack_sequence.16'], 'tupleobj': '$28unpack_sequence.17'}), (30, {'value': '$28unpack_sequence.13'}), (32, {'value': '$28unpack_sequence.14'}), (34, {'value': '$28unpack_sequence.15'}), (36, {'value': '$28unpack_sequence.16'}), (38, {'items': [], 'res': '$38build_list.18'}), (40, {'value': '$38build_list.18'}), (42, {'res': '$42load_global.19'}), (44, {'res': '$y244.20'}), (46, {'res': '$y146.21'}), (48, {'lhs': '$y244.20', 'rhs': '$y146.21', 'res': '$48binary_subtract.22'}), (50, {'func': '$42load_global.19', 'args': ['$48binary_subtract.22'], 'res': '$50call_function.23'}), (52, {'res': '$52load_global.24'}), (54, {'res': '$x254.25'}), (56, {'res': '$x156.26'}), (58, {'lhs': '$x254.25', 'rhs': '$x156.26', 'res': '$58binary_subtract.27'}), (60, {'func': '$52load_global.24', 'args': ['$58binary_subtract.27'], 'res': '$60call_function.28'}), (62, {'lhs': '$50call_function.23', 'rhs': '$60call_function.28', 'res': '$62compare_op.29'}), (64, {'value': '$62compare_op.29'}), (66, {'res': '$issteep66.30'}), (68, {'pred': '$issteep66.30'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 90: ()})
18:53 [DEBUG]block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$y170.0'}), (72, {'res': '$x172.1'}), (76, {'value': '$y170.0'}), (78, {'value': '$x172.1'}), (80, {'res': '$y280.2'}), (82, {'res': '$x282.3'}), (86, {'value': '$y280.2'}), (88, {'value': '$x282.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: ()})
18:53 [DEBUG]block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$const90.0'}), (92, {'value': '$const90.0'}), (94, {'res': '$x194.1'}), (96, {'res': '$x296.2'}), (98, {'lhs': '$x194.1', 'rhs': '$x296.2', 'res': '$98compare_op.3'}), (100, {'pred': '$98compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 126: ()})
18:53 [DEBUG]block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$x2102.0'}), (104, {'res': '$x1104.1'}), (108, {'value': '$x2102.0'}), (110, {'value': '$x1104.1'}), (112, {'res': '$y2112.2'}), (114, {'res': '$y1114.3'}), (118, {'value': '$y2112.2'}), (120, {'value': '$y1114.3'}), (122, {'res': '$const122.4'}), (124, {'value': '$const122.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={126: ()})
18:53 [DEBUG]block_infos State(pc_initial=126 nstack_initial=0):
AdaptBlockInfo(insts=((126, {'res': '$x2126.0'}), (128, {'res': '$x1128.1'}), (130, {'lhs': '$x2126.0', 'rhs': '$x1128.1', 'res': '$130binary_subtract.2'}), (132, {'value': '$130binary_subtract.2'}), (134, {'res': '$134load_global.3'}), (136, {'res': '$y2136.4'}), (138, {'res': '$y1138.5'}), (140, {'lhs': '$y2136.4', 'rhs': '$y1138.5', 'res': '$140binary_subtract.6'}), (142, {'func': '$134load_global.3', 'args': ['$140binary_subtract.6'], 'res': '$142call_function.7'}), (144, {'value': '$142call_function.7'}), (146, {'res': '$146load_global.8'}), (148, {'res': '$deltax148.9'}), (150, {'res': '$const150.10'}), (152, {'lhs': '$deltax148.9', 'rhs': '$const150.10', 'res': '$152binary_true_divide.11'}), (154, {'func': '$146load_global.8', 'args': ['$152binary_true_divide.11'], 'res': '$154call_function.12'}), (156, {'value': '$154call_function.12'}), (158, {'res': '$y1158.13'}), (160, {'value': '$y1158.13'}), (162, {'res': '$const162.14'}), (164, {'value': '$const162.14'}), (166, {'res': '$y1166.15'}), (168, {'res': '$y2168.16'}), (170, {'lhs': '$y1166.15', 'rhs': '$y2168.16', 'res': '$170compare_op.17'}), (172, {'pred': '$170compare_op.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={174: (), 180: ()})
18:53 [DEBUG]block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=((174, {'res': '$const174.0'}), (176, {'value': '$const174.0'}), (178, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={184: ()})
18:53 [DEBUG]block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {'res': '$const180.0'}), (182, {'value': '$const180.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={184: ()})
18:53 [DEBUG]block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$184load_global.0'}), (186, {'res': '$x1186.1'}), (188, {'res': '$x2188.2'}), (190, {'res': '$const190.3'}), (192, {'lhs': '$x2188.2', 'rhs': '$const190.3', 'res': '$192binary_add.4'}), (194, {'func': '$184load_global.0', 'args': ['$x1186.1', '$192binary_add.4'], 'res': '$194call_function.5'}), (196, {'value': '$194call_function.5', 'res': '$196get_iter.6'})), outgoing_phis={'$phi198.0': '$196get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={198: ('$196get_iter.6',)})
18:53 [DEBUG]block_infos State(pc_initial=198 nstack_initial=1):
AdaptBlockInfo(insts=((198, {'iterator': '$phi198.0', 'pair': '$198for_iter.1', 'indval': '$198for_iter.2', 'pred': '$198for_iter.3'}),), outgoing_phis={'$phi200.1': '$198for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={270: (), 200: ('$phi198.0', '$198for_iter.2')})
18:53 [DEBUG]block_infos State(pc_initial=200 nstack_initial=2):
AdaptBlockInfo(insts=((200, {'value': '$phi200.1'}), (202, {'res': '$issteep202.2'}), (204, {'pred': '$issteep202.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={206: ('$phi200.0',), 222: ('$phi200.0',)})
18:53 [DEBUG]block_infos State(pc_initial=206 nstack_initial=1):
AdaptBlockInfo(insts=((206, {'res': '$points206.1'}), (208, {'item': '$points206.1', 'res': '$208load_method.2'}), (210, {'res': '$y210.3'}), (212, {'res': '$x212.4'}), (214, {'items': ['$y210.3', '$x212.4'], 'res': '$214build_tuple.5'}), (216, {'func': '$208load_method.2', 'args': ['$214build_tuple.5'], 'res': '$216call_method.6'}), (220, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={236: ('$phi206.0',)})
18:53 [DEBUG]block_infos State(pc_initial=222 nstack_initial=1):
AdaptBlockInfo(insts=((222, {'res': '$points222.1'}), (224, {'item': '$points222.1', 'res': '$224load_method.2'}), (226, {'res': '$x226.3'}), (228, {'res': '$y228.4'}), (230, {'items': ['$x226.3', '$y228.4'], 'res': '$230build_tuple.5'}), (232, {'func': '$224load_method.2', 'args': ['$230build_tuple.5'], 'res': '$232call_method.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={236: ('$phi222.0',)})
18:53 [DEBUG]block_infos State(pc_initial=236 nstack_initial=1):
AdaptBlockInfo(insts=((236, {'res': '$error236.1'}), (238, {'res': '$deltay238.2'}), (240, {'lhs': '$error236.1', 'rhs': '$deltay238.2', 'res': '$240inplace_subtract.3'}), (242, {'value': '$240inplace_subtract.3'}), (244, {'res': '$error244.4'}), (246, {'res': '$const246.5'}), (248, {'lhs': '$error244.4', 'rhs': '$const246.5', 'res': '$248compare_op.6'}), (250, {'pred': '$248compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={252: ('$phi236.0',), 198: ('$phi236.0',)})
18:53 [DEBUG]block_infos State(pc_initial=252 nstack_initial=1):
AdaptBlockInfo(insts=((252, {'res': '$y252.1'}), (254, {'res': '$ystep254.2'}), (256, {'lhs': '$y252.1', 'rhs': '$ystep254.2', 'res': '$256inplace_add.3'}), (258, {'value': '$256inplace_add.3'}), (260, {'res': '$error260.4'}), (262, {'res': '$deltax262.5'}), (264, {'lhs': '$error260.4', 'rhs': '$deltax262.5', 'res': '$264inplace_add.6'}), (266, {'value': '$264inplace_add.6'}), (268, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={198: ('$phi252.0',)})
18:53 [DEBUG]block_infos State(pc_initial=270 nstack_initial=0):
AdaptBlockInfo(insts=((270, {'res': '$rev270.0'}), (272, {}), (274, {'pred': '$rev270.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={276: (), 284: ()})
18:53 [DEBUG]block_infos State(pc_initial=276 nstack_initial=0):
AdaptBlockInfo(insts=((276, {'res': '$points276.0'}), (278, {'item': '$points276.0', 'res': '$278load_method.1'}), (280, {'func': '$278load_method.1', 'args': [], 'res': '$280call_method.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={284: ()})
18:53 [DEBUG]block_infos State(pc_initial=284 nstack_initial=0):
AdaptBlockInfo(insts=((284, {'res': '$points284.0'}), (286, {'retval': '$points284.0', 'castval': '$286return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=a, index=$const4.1, fn=<built-in function getitem>) ['$6binary_subscr.2', '$const4.1', 'a']
    $const10.4 = const(int, 1)               ['$const10.4']
    $12binary_subscr.5 = getitem(value=a, index=$const10.4, fn=<built-in function getitem>) ['$12binary_subscr.5', '$const10.4', 'a']
    $const16.7 = const(int, 0)               ['$const16.7']
    $18binary_subscr.8 = getitem(value=b, index=$const16.7, fn=<built-in function getitem>) ['$18binary_subscr.8', '$const16.7', 'b']
    $const22.10 = const(int, 1)              ['$const22.10']
    $24binary_subscr.11 = getitem(value=b, index=$const22.10, fn=<built-in function getitem>) ['$24binary_subscr.11', '$const22.10', 'b']
    $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)]) ['$12binary_subscr.5', '$18binary_subscr.8', '$24binary_subscr.11', '$26build_tuple.12', '$6binary_subscr.2']
    $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4) ['$26build_tuple.12', '$28unpack_sequence.17']
    $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>) ['$28unpack_sequence.13', '$28unpack_sequence.17']
    $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>) ['$28unpack_sequence.14', '$28unpack_sequence.17']
    $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>) ['$28unpack_sequence.15', '$28unpack_sequence.17']
    $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>) ['$28unpack_sequence.16', '$28unpack_sequence.17']
    x1 = $28unpack_sequence.13               ['$28unpack_sequence.13', 'x1']
    y1 = $28unpack_sequence.14               ['$28unpack_sequence.14', 'y1']
    x2 = $28unpack_sequence.15               ['$28unpack_sequence.15', 'x2']
    y2 = $28unpack_sequence.16               ['$28unpack_sequence.16', 'y2']
    points = build_list(items=[])            ['points']
    $42load_global.19 = global(abs: <built-in function abs>) ['$42load_global.19']
    $48binary_subtract.22 = y2 - y1          ['$48binary_subtract.22', 'y1', 'y2']
    $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.19', '$48binary_subtract.22', '$50call_function.23']
    $52load_global.24 = global(abs: <built-in function abs>) ['$52load_global.24']
    $58binary_subtract.27 = x2 - x1          ['$58binary_subtract.27', 'x1', 'x2']
    $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None) ['$52load_global.24', '$58binary_subtract.27', '$60call_function.28']
    issteep = $50call_function.23 > $60call_function.28 ['$50call_function.23', '$60call_function.28', 'issteep']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None) ['$68pred', 'bool68', 'issteep']
    branch $68pred, 70, 90                   ['$68pred']
label 70:
    $x172.1 = x1                             ['$x172.1', 'x1']
    x1 = y1                                  ['x1', 'y1']
    y1 = $x172.1                             ['$x172.1', 'y1']
    $x282.3 = x2                             ['$x282.3', 'x2']
    x2 = y2                                  ['x2', 'y2']
    y2 = $x282.3                             ['$x282.3', 'y2']
    jump 90                                  []
label 90:
    rev = const(bool, False)                 ['rev']
    $98compare_op.3 = x1 > x2                ['$98compare_op.3', 'x1', 'x2']
    bool100 = global(bool: <class 'bool'>)   ['bool100']
    $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None) ['$100pred', '$98compare_op.3', 'bool100']
    branch $100pred, 102, 126                ['$100pred']
label 102:
    $x1104.1 = x1                            ['$x1104.1', 'x1']
    x1 = x2                                  ['x1', 'x2']
    x2 = $x1104.1                            ['$x1104.1', 'x2']
    $y1114.3 = y1                            ['$y1114.3', 'y1']
    y1 = y2                                  ['y1', 'y2']
    y2 = $y1114.3                            ['$y1114.3', 'y2']
    rev = const(bool, True)                  ['rev']
    jump 126                                 []
label 126:
    deltax = x2 - x1                         ['deltax', 'x1', 'x2']
    $134load_global.3 = global(abs: <built-in function abs>) ['$134load_global.3']
    $140binary_subtract.6 = y2 - y1          ['$140binary_subtract.6', 'y1', 'y2']
    deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.3', '$140binary_subtract.6', 'deltay']
    $146load_global.8 = global(int: <class 'int'>) ['$146load_global.8']
    $const150.10 = const(int, 2)             ['$const150.10']
    $152binary_true_divide.11 = deltax / $const150.10 ['$152binary_true_divide.11', '$const150.10', 'deltax']
    error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None) ['$146load_global.8', '$152binary_true_divide.11', 'error']
    y = y1                                   ['y', 'y1']
    ystep = const(NoneType, None)            ['ystep']
    $170compare_op.17 = y1 < y2              ['$170compare_op.17', 'y1', 'y2']
    bool172 = global(bool: <class 'bool'>)   ['bool172']
    $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None) ['$170compare_op.17', '$172pred', 'bool172']
    branch $172pred, 174, 180                ['$172pred']
label 174:
    ystep = const(int, 1)                    ['ystep']
    jump 184                                 []
label 180:
    ystep = const(int, -1)                   ['ystep']
    jump 184                                 []
label 184:
    $184load_global.0 = global(range: <class 'range'>) ['$184load_global.0']
    $const190.3 = const(int, 1)              ['$const190.3']
    $192binary_add.4 = x2 + $const190.3      ['$192binary_add.4', '$const190.3', 'x2']
    $194call_function.5 = call $184load_global.0(x1, $192binary_add.4, func=$184load_global.0, args=[Var(x1, tools.py:64), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None) ['$184load_global.0', '$192binary_add.4', '$194call_function.5', 'x1']
    $196get_iter.6 = getiter(value=$194call_function.5) ['$194call_function.5', '$196get_iter.6']
    $phi198.0 = $196get_iter.6               ['$196get_iter.6', '$phi198.0']
    jump 198                                 []
label 198:
    $198for_iter.1 = iternext(value=$phi198.0) ['$198for_iter.1', '$phi198.0']
    $198for_iter.2 = pair_first(value=$198for_iter.1) ['$198for_iter.1', '$198for_iter.2']
    $198for_iter.3 = pair_second(value=$198for_iter.1) ['$198for_iter.1', '$198for_iter.3']
    $phi200.1 = $198for_iter.2               ['$198for_iter.2', '$phi200.1']
    branch $198for_iter.3, 200, 270          ['$198for_iter.3']
label 200:
    x = $phi200.1                            ['$phi200.1', 'x']
    bool204 = global(bool: <class 'bool'>)   ['bool204']
    $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None) ['$204pred', 'bool204', 'issteep']
    branch $204pred, 206, 222                ['$204pred']
label 206:
    $208load_method.2 = getattr(value=points, attr=append) ['$208load_method.2', 'points']
    $214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)]) ['$214build_tuple.5', 'x', 'y']
    $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_method.2', '$214build_tuple.5', '$216call_method.6']
    jump 236                                 []
label 222:
    $224load_method.2 = getattr(value=points, attr=append) ['$224load_method.2', 'points']
    $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)]) ['$230build_tuple.5', 'x', 'y']
    $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None) ['$224load_method.2', '$230build_tuple.5', '$232call_method.6']
    jump 236                                 []
label 236:
    $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined) ['$240inplace_subtract.3', 'deltay', 'error']
    error = $240inplace_subtract.3           ['$240inplace_subtract.3', 'error']
    $const246.5 = const(int, 0)              ['$const246.5']
    $248compare_op.6 = error < $const246.5   ['$248compare_op.6', '$const246.5', 'error']
    bool250 = global(bool: <class 'bool'>)   ['bool250']
    $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None) ['$248compare_op.6', '$250pred', 'bool250']
    branch $250pred, 252, 198                ['$250pred']
label 252:
    $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined) ['$256inplace_add.3', 'y', 'ystep']
    y = $256inplace_add.3                    ['$256inplace_add.3', 'y']
    $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined) ['$264inplace_add.6', 'deltax', 'error']
    error = $264inplace_add.6                ['$264inplace_add.6', 'error']
    jump 198                                 []
label 270:
    bool274 = global(bool: <class 'bool'>)   ['bool274']
    $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None) ['$274pred', 'bool274', 'rev']
    branch $274pred, 276, 284                ['$274pred']
label 276:
    $278load_method.1 = getattr(value=points, attr=reverse) ['$278load_method.1', 'points']
    $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$278load_method.1', '$280call_method.2']
    jump 284                                 []
label 284:
    $286return_value.1 = cast(value=points)  ['$286return_value.1', 'points']
    return $286return_value.1                ['$286return_value.1']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block analysis pass on 70
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block analysis pass on 90
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1 > x2
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block analysis pass on 102
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $x1104.1 = x1
18:53 [DEBUG]on stmt: x1 = x2
18:53 [DEBUG]on stmt: x2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block analysis pass on 126
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: deltax = x2 - x1
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block analysis pass on 174
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block analysis pass on 180
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block analysis pass on 184
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1, $192binary_add.4, func=$184load_global.0, args=[Var(x1, tools.py:64), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block analysis pass on 198
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block analysis pass on 200
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block analysis pass on 206
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block analysis pass on 222
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block analysis pass on 236
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block analysis pass on 252
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block analysis pass on 270
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block analysis pass on 276
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block analysis pass on 284
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block analysis pass on 285
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff97544820>
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$100pred': [<numba.core.ir.Assign object at 0xffff9788c4c0>],
             '$12binary_subscr.5': [<numba.core.ir.Assign object at 0xffff97957e20>],
             '$134load_global.3': [<numba.core.ir.Assign object at 0xffff97793be0>],
             '$140binary_subtract.6': [<numba.core.ir.Assign object at 0xffff97793550>],
             '$146load_global.8': [<numba.core.ir.Assign object at 0xffff977930d0>],
             '$152binary_true_divide.11': [<numba.core.ir.Assign object at 0xffff977937c0>],
             '$170compare_op.17': [<numba.core.ir.Assign object at 0xffff97888e80>],
             '$172pred': [<numba.core.ir.Assign object at 0xffff97888040>],
             '$184load_global.0': [<numba.core.ir.Assign object at 0xffff979fbfa0>],
             '$18binary_subscr.8': [<numba.core.ir.Assign object at 0xffff97957040>],
             '$192binary_add.4': [<numba.core.ir.Assign object at 0xffff979fb610>],
             '$194call_function.5': [<numba.core.ir.Assign object at 0xffff979fbaf0>],
             '$196get_iter.6': [<numba.core.ir.Assign object at 0xffff9778a220>],
             '$198for_iter.1': [<numba.core.ir.Assign object at 0xffff9778a8e0>],
             '$198for_iter.2': [<numba.core.ir.Assign object at 0xffff9778a880>],
             '$198for_iter.3': [<numba.core.ir.Assign object at 0xffff9778a790>],
             '$204pred': [<numba.core.ir.Assign object at 0xffff978fc820>],
             '$208load_method.2': [<numba.core.ir.Assign object at 0xffff978fc250>],
             '$214build_tuple.5': [<numba.core.ir.Assign object at 0xffff978d1ac0>],
             '$216call_method.6': [<numba.core.ir.Assign object at 0xffff978d1100>],
             '$224load_method.2': [<numba.core.ir.Assign object at 0xffff97878ca0>],
             '$230build_tuple.5': [<numba.core.ir.Assign object at 0xffff978b5eb0>],
             '$232call_method.6': [<numba.core.ir.Assign object at 0xffff978b53d0>],
             '$240inplace_subtract.3': [<numba.core.ir.Assign object at 0xffff978b5820>],
             '$248compare_op.6': [<numba.core.ir.Assign object at 0xffff978b5bb0>],
             '$24binary_subscr.11': [<numba.core.ir.Assign object at 0xffff97957460>],
             '$250pred': [<numba.core.ir.Assign object at 0xffff979154c0>],
             '$256inplace_add.3': [<numba.core.ir.Assign object at 0xffff97915af0>],
             '$264inplace_add.6': [<numba.core.ir.Assign object at 0xffff97924f70>],
             '$26build_tuple.12': [<numba.core.ir.Assign object at 0xffff97573ac0>],
             '$274pred': [<numba.core.ir.Assign object at 0xffff97924cd0>],
             '$278load_method.1': [<numba.core.ir.Assign object at 0xffff97924d60>],
             '$280call_method.2': [<numba.core.ir.Assign object at 0xffff979247f0>],
             '$286return_value.1': [<numba.core.ir.Assign object at 0xffff9794d310>],
             '$28unpack_sequence.13': [<numba.core.ir.Assign object at 0xffff97661dc0>],
             '$28unpack_sequence.14': [<numba.core.ir.Assign object at 0xffff975c3310>],
             '$28unpack_sequence.15': [<numba.core.ir.Assign object at 0xffff975c3fa0>],
             '$28unpack_sequence.16': [<numba.core.ir.Assign object at 0xffff97544730>],
             '$28unpack_sequence.17': [<numba.core.ir.Assign object at 0xffff97573a60>],
             '$42load_global.19': [<numba.core.ir.Assign object at 0xffff97785640>],
             '$48binary_subtract.22': [<numba.core.ir.Assign object at 0xffff977c6070>],
             '$50call_function.23': [<numba.core.ir.Assign object at 0xffff977c6250>],
             '$52load_global.24': [<numba.core.ir.Assign object at 0xffff977c60a0>],
             '$58binary_subtract.27': [<numba.core.ir.Assign object at 0xffff9786b0a0>],
             '$60call_function.28': [<numba.core.ir.Assign object at 0xffff9786ba00>],
             '$68pred': [<numba.core.ir.Assign object at 0xffff9786b8e0>],
             '$6binary_subscr.2': [<numba.core.ir.Assign object at 0xffff97957e50>],
             '$98compare_op.3': [<numba.core.ir.Assign object at 0xffff9788c610>],
             '$const10.4': [<numba.core.ir.Assign object at 0xffff97879cd0>],
             '$const150.10': [<numba.core.ir.Assign object at 0xffff97793d60>],
             '$const16.7': [<numba.core.ir.Assign object at 0xffff97a0f5b0>],
             '$const190.3': [<numba.core.ir.Assign object at 0xffff979fb910>],
             '$const22.10': [<numba.core.ir.Assign object at 0xffff97573130>],
             '$const246.5': [<numba.core.ir.Assign object at 0xffff978b5a00>],
             '$const4.1': [<numba.core.ir.Assign object at 0xffff97879670>],
             '$phi198.0': [<numba.core.ir.Assign object at 0xffff979fb1f0>],
             '$phi200.1': [<numba.core.ir.Assign object at 0xffff9778afd0>],
             '$x1104.1': [<numba.core.ir.Assign object at 0xffff9782c370>],
             '$x172.1': [<numba.core.ir.Assign object at 0xffff97879220>],
             '$x282.3': [<numba.core.ir.Assign object at 0xffff9788cee0>],
             '$y1114.3': [<numba.core.ir.Assign object at 0xffff9782c040>],
             'a': [<numba.core.ir.Assign object at 0xffff97879ee0>],
             'b': [<numba.core.ir.Assign object at 0xffff978792b0>],
             'bool100': [<numba.core.ir.Assign object at 0xffff9788ceb0>],
             'bool172': [<numba.core.ir.Assign object at 0xffff978881c0>],
             'bool204': [<numba.core.ir.Assign object at 0xffff978fc3a0>],
             'bool250': [<numba.core.ir.Assign object at 0xffff97915f70>],
             'bool274': [<numba.core.ir.Assign object at 0xffff979245e0>],
             'bool68': [<numba.core.ir.Assign object at 0xffff9786b520>],
             'deltax': [<numba.core.ir.Assign object at 0xffff9782c310>],
             'deltay': [<numba.core.ir.Assign object at 0xffff97793e50>],
             'error': [<numba.core.ir.Assign object at 0xffff97888520>,
                       <numba.core.ir.Assign object at 0xffff978b5a30>,
                       <numba.core.ir.Assign object at 0xffff97924a00>],
             'issteep': [<numba.core.ir.Assign object at 0xffff9786b130>],
             'points': [<numba.core.ir.Assign object at 0xffff97785b80>],
             'rev': [<numba.core.ir.Assign object at 0xffff9788ce20>,
                     <numba.core.ir.Assign object at 0xffff9782c790>],
             'x': [<numba.core.ir.Assign object at 0xffff978fcf70>],
             'x1': [<numba.core.ir.Assign object at 0xffff97879730>,
                    <numba.core.ir.Assign object at 0xffff9786b880>,
                    <numba.core.ir.Assign object at 0xffff9782c910>],
             'x2': [<numba.core.ir.Assign object at 0xffff97785070>,
                    <numba.core.ir.Assign object at 0xffff9788c460>,
                    <numba.core.ir.Assign object at 0xffff9782cd00>],
             'y': [<numba.core.ir.Assign object at 0xffff97888be0>,
                   <numba.core.ir.Assign object at 0xffff97915fa0>],
             'y1': [<numba.core.ir.Assign object at 0xffff97a58bb0>,
                    <numba.core.ir.Assign object at 0xffff9786b0d0>,
                    <numba.core.ir.Assign object at 0xffff9782c550>],
             'y2': [<numba.core.ir.Assign object at 0xffff97785df0>,
                    <numba.core.ir.Assign object at 0xffff9788ca60>,
                    <numba.core.ir.Assign object at 0xffff9782c2e0>],
             'ystep': [<numba.core.ir.Assign object at 0xffff978888e0>,
                       <numba.core.ir.Assign object at 0xffff97793e80>,
                       <numba.core.ir.Assign object at 0xffff97888fd0>]})
18:53 [DEBUG]SSA violators {'x2', 'x1', 'y', 'error', 'y2', 'ystep', 'rev', 'y1'}
18:53 [DEBUG]Fix SSA violator on var x2
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]first assign: x2
18:53 [DEBUG]replaced with: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2 = y2
18:53 [DEBUG]replaced with: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1 > x2
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $x1104.1 = x1
18:53 [DEBUG]on stmt: x1 = x2
18:53 [DEBUG]on stmt: x2 = $x1104.1
18:53 [DEBUG]replaced with: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: deltax = x2 - x1
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1, $192binary_add.4, func=$184load_global.0, args=[Var(x1, tools.py:64), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0xffff975448e0>],
             70: [<numba.core.ir.Assign object at 0xffff97924c70>],
             102: [<numba.core.ir.Assign object at 0xffff9794dbb0>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]find_def var='x2' stmt=$58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]find_def var='x2' stmt=$x282.3 = x2
18:53 [DEBUG]find_def_from_top label 70
18:53 [DEBUG]idom 0 from label 70
18:53 [DEBUG]find_def_from_bottom label 0
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1 > x2
18:53 [DEBUG]find_def var='x2' stmt=$98compare_op.3 = x1 > x2
18:53 [DEBUG]find_def_from_top label 90
18:53 [DEBUG]insert phi node x2.3 = phi(incoming_values=[], incoming_blocks=[]) at 90
18:53 [DEBUG]find_def_from_bottom label 0
18:53 [DEBUG]incoming_def x2 = $28unpack_sequence.15
18:53 [DEBUG]find_def_from_bottom label 70
18:53 [DEBUG]incoming_def x2.1 = y2
18:53 [DEBUG]replaced with: $98compare_op.3 = x1 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $x1104.1 = x1
18:53 [DEBUG]on stmt: x1 = x2
18:53 [DEBUG]find_def var='x2' stmt=x1 = x2
18:53 [DEBUG]find_def_from_top label 102
18:53 [DEBUG]idom 90 from label 102
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]replaced with: x1 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: deltax = x2 - x1
18:53 [DEBUG]find_def var='x2' stmt=deltax = x2 - x1
18:53 [DEBUG]find_def_from_top label 126
18:53 [DEBUG]insert phi node x2.4 = phi(incoming_values=[], incoming_blocks=[]) at 126
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]incoming_def x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]find_def_from_bottom label 102
18:53 [DEBUG]incoming_def x2.2 = $x1104.1
18:53 [DEBUG]replaced with: deltax = x2.4 - x1
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2 + $const190.3
18:53 [DEBUG]find_def var='x2' stmt=$192binary_add.4 = x2 + $const190.3
18:53 [DEBUG]find_def_from_top label 184
18:53 [DEBUG]idom 126 from label 184
18:53 [DEBUG]find_def_from_bottom label 126
18:53 [DEBUG]replaced with: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1, $192binary_add.4, func=$184load_global.0, args=[Var(x1, tools.py:64), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Fix SSA violator on var x1
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]first assign: x1
18:53 [DEBUG]replaced with: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1 = y1
18:53 [DEBUG]replaced with: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $x1104.1 = x1
18:53 [DEBUG]on stmt: x1 = x2.3
18:53 [DEBUG]replaced with: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1, $192binary_add.4, func=$184load_global.0, args=[Var(x1, tools.py:64), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97924b20>
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0xffff975448b0>],
             70: [<numba.core.ir.Assign object at 0xffff9794d7f0>],
             102: [<numba.core.ir.Assign object at 0xffff9794d5b0>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]find_def var='x1' stmt=$58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]find_def var='x1' stmt=$x172.1 = x1
18:53 [DEBUG]find_def_from_top label 70
18:53 [DEBUG]idom 0 from label 70
18:53 [DEBUG]find_def_from_bottom label 0
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1 > x2.3
18:53 [DEBUG]find_def var='x1' stmt=$98compare_op.3 = x1 > x2.3
18:53 [DEBUG]find_def_from_top label 90
18:53 [DEBUG]insert phi node x1.3 = phi(incoming_values=[], incoming_blocks=[]) at 90
18:53 [DEBUG]find_def_from_bottom label 0
18:53 [DEBUG]incoming_def x1 = $28unpack_sequence.13
18:53 [DEBUG]find_def_from_bottom label 70
18:53 [DEBUG]incoming_def x1.1 = y1
18:53 [DEBUG]replaced with: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $x1104.1 = x1
18:53 [DEBUG]find_def var='x1' stmt=$x1104.1 = x1
18:53 [DEBUG]find_def_from_top label 102
18:53 [DEBUG]idom 90 from label 102
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]replaced with: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1
18:53 [DEBUG]find_def var='x1' stmt=deltax = x2.4 - x1
18:53 [DEBUG]find_def_from_top label 126
18:53 [DEBUG]insert phi node x1.4 = phi(incoming_values=[], incoming_blocks=[]) at 126
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]incoming_def x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]find_def_from_bottom label 102
18:53 [DEBUG]incoming_def x1.2 = x2.3
18:53 [DEBUG]replaced with: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1, $192binary_add.4, func=$184load_global.0, args=[Var(x1, tools.py:64), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]find_def var='x1' stmt=$194call_function.5 = call $184load_global.0(x1, $192binary_add.4, func=$184load_global.0, args=[Var(x1, tools.py:64), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]find_def_from_top label 184
18:53 [DEBUG]idom 126 from label 184
18:53 [DEBUG]find_def_from_bottom label 126
18:53 [DEBUG]replaced with: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9786b5e0>
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Fix SSA violator on var y
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]first assign: y
18:53 [DEBUG]replaced with: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y = $256inplace_add.3
18:53 [DEBUG]replaced with: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9794d640>
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {126: [<numba.core.ir.Assign object at 0xffff9794d400>],
             252: [<numba.core.ir.Assign object at 0xffff97957b50>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)])
18:53 [DEBUG]find_def var='y' stmt=$214build_tuple.5 = build_tuple(items=[Var(y, tools.py:78), Var(x, tools.py:84)])
18:53 [DEBUG]find_def_from_top label 206
18:53 [DEBUG]idom 200 from label 206
18:53 [DEBUG]find_def_from_bottom label 200
18:53 [DEBUG]find_def_from_top label 200
18:53 [DEBUG]idom 198 from label 200
18:53 [DEBUG]find_def_from_bottom label 198
18:53 [DEBUG]find_def_from_top label 198
18:53 [DEBUG]insert phi node y.2 = phi(incoming_values=[], incoming_blocks=[]) at 198
18:53 [DEBUG]find_def_from_bottom label 184
18:53 [DEBUG]find_def_from_top label 184
18:53 [DEBUG]idom 126 from label 184
18:53 [DEBUG]find_def_from_bottom label 126
18:53 [DEBUG]incoming_def y = y1
18:53 [DEBUG]find_def_from_bottom label 285
18:53 [DEBUG]find_def_from_top label 285
18:53 [DEBUG]insert phi node y.3 = phi(incoming_values=[], incoming_blocks=[]) at 285
18:53 [DEBUG]find_def_from_bottom label 236
18:53 [DEBUG]find_def_from_top label 236
18:53 [DEBUG]idom 200 from label 236
18:53 [DEBUG]find_def_from_bottom label 200
18:53 [DEBUG]find_def_from_top label 200
18:53 [DEBUG]idom 198 from label 200
18:53 [DEBUG]find_def_from_bottom label 198
18:53 [DEBUG]incoming_def y.2 = phi(incoming_values=[Var(y, tools.py:78)], incoming_blocks=[184])
18:53 [DEBUG]find_def_from_bottom label 252
18:53 [DEBUG]incoming_def y.1 = $256inplace_add.3
18:53 [DEBUG]incoming_def y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]replaced with: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)])
18:53 [DEBUG]find_def var='y' stmt=$230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y, tools.py:78)])
18:53 [DEBUG]find_def_from_top label 222
18:53 [DEBUG]idom 200 from label 222
18:53 [DEBUG]find_def_from_bottom label 200
18:53 [DEBUG]find_def_from_top label 200
18:53 [DEBUG]idom 198 from label 200
18:53 [DEBUG]find_def_from_bottom label 198
18:53 [DEBUG]replaced with: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def var='y' stmt=$256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def_from_top label 252
18:53 [DEBUG]idom 236 from label 252
18:53 [DEBUG]find_def_from_bottom label 236
18:53 [DEBUG]find_def_from_top label 236
18:53 [DEBUG]idom 200 from label 236
18:53 [DEBUG]find_def_from_bottom label 200
18:53 [DEBUG]find_def_from_top label 200
18:53 [DEBUG]idom 198 from label 200
18:53 [DEBUG]find_def_from_bottom label 198
18:53 [DEBUG]replaced with: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97878f40>
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Fix SSA violator on var error
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]first assign: error
18:53 [DEBUG]replaced with: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $240inplace_subtract.3
18:53 [DEBUG]replaced with: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error = $264inplace_add.6
18:53 [DEBUG]replaced with: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff979577f0>
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {126: [<numba.core.ir.Assign object at 0xffff97544700>],
             236: [<numba.core.ir.Assign object at 0xffff9794dd60>],
             252: [<numba.core.ir.Assign object at 0xffff9797e7f0>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def var='error' stmt=$240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def_from_top label 236
18:53 [DEBUG]idom 200 from label 236
18:53 [DEBUG]find_def_from_bottom label 200
18:53 [DEBUG]find_def_from_top label 200
18:53 [DEBUG]idom 198 from label 200
18:53 [DEBUG]find_def_from_bottom label 198
18:53 [DEBUG]find_def_from_top label 198
18:53 [DEBUG]insert phi node error.3 = phi(incoming_values=[], incoming_blocks=[]) at 198
18:53 [DEBUG]find_def_from_bottom label 184
18:53 [DEBUG]find_def_from_top label 184
18:53 [DEBUG]idom 126 from label 184
18:53 [DEBUG]find_def_from_bottom label 126
18:53 [DEBUG]incoming_def error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]find_def_from_bottom label 285
18:53 [DEBUG]find_def_from_top label 285
18:53 [DEBUG]insert phi node error.4 = phi(incoming_values=[], incoming_blocks=[]) at 285
18:53 [DEBUG]find_def_from_bottom label 236
18:53 [DEBUG]incoming_def error.1 = $240inplace_subtract.3
18:53 [DEBUG]find_def_from_bottom label 252
18:53 [DEBUG]incoming_def error.2 = $264inplace_add.6
18:53 [DEBUG]incoming_def error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]replaced with: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error < $const246.5
18:53 [DEBUG]find_def var='error' stmt=$248compare_op.6 = error < $const246.5
18:53 [DEBUG]replaced with: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def var='error' stmt=$264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def_from_top label 252
18:53 [DEBUG]idom 236 from label 252
18:53 [DEBUG]find_def_from_bottom label 236
18:53 [DEBUG]replaced with: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Fix SSA violator on var y2
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]first assign: y2
18:53 [DEBUG]replaced with: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2 = $x282.3
18:53 [DEBUG]replaced with: y2.1 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]on stmt: y2 = $y1114.3
18:53 [DEBUG]replaced with: y2.2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: error.3 = phi(incoming_values=[Var(error, tools.py:77), Var(error.4, tools.py:89)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97544d60>
18:53 [DEBUG]on stmt: error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0xffff9794d760>],
             70: [<numba.core.ir.Assign object at 0xffff9794d100>],
             102: [<numba.core.ir.Assign object at 0xffff9794d280>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]find_def var='y2' stmt=$48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]find_def var='y2' stmt=x2.1 = y2
18:53 [DEBUG]find_def_from_top label 70
18:53 [DEBUG]idom 0 from label 70
18:53 [DEBUG]find_def_from_bottom label 0
18:53 [DEBUG]on stmt: y2.1 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2
18:53 [DEBUG]find_def var='y2' stmt=y1 = y2
18:53 [DEBUG]find_def_from_top label 102
18:53 [DEBUG]idom 90 from label 102
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]find_def_from_top label 90
18:53 [DEBUG]insert phi node y2.3 = phi(incoming_values=[], incoming_blocks=[]) at 90
18:53 [DEBUG]find_def_from_bottom label 0
18:53 [DEBUG]incoming_def y2 = $28unpack_sequence.16
18:53 [DEBUG]find_def_from_bottom label 70
18:53 [DEBUG]incoming_def y2.1 = $x282.3
18:53 [DEBUG]replaced with: y1 = y2.3
18:53 [DEBUG]on stmt: y2.2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2 - y1
18:53 [DEBUG]find_def var='y2' stmt=$140binary_subtract.6 = y2 - y1
18:53 [DEBUG]find_def_from_top label 126
18:53 [DEBUG]insert phi node y2.4 = phi(incoming_values=[], incoming_blocks=[]) at 126
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]incoming_def y2.3 = phi(incoming_values=[Var(y2, tools.py:64), Var(y2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]find_def_from_bottom label 102
18:53 [DEBUG]incoming_def y2.2 = $y1114.3
18:53 [DEBUG]replaced with: $140binary_subtract.6 = y2.4 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2
18:53 [DEBUG]find_def var='y2' stmt=$170compare_op.17 = y1 < y2
18:53 [DEBUG]replaced with: $170compare_op.17 = y1 < y2.4
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: error.3 = phi(incoming_values=[Var(error, tools.py:77), Var(error.4, tools.py:89)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97915100>
18:53 [DEBUG]on stmt: error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Fix SSA violator on var ystep
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2.1 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: y2.3 = phi(incoming_values=[Var(y2, tools.py:64), Var(y2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2.3
18:53 [DEBUG]on stmt: y2.2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: y2.4 = phi(incoming_values=[Var(y2.3, tools.py:72), Var(y2.2, tools.py:73)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2.4 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]first assign: ystep
18:53 [DEBUG]replaced with: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2.4
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: ystep = const(int, 1)
18:53 [DEBUG]replaced with: ystep.1 = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: ystep = const(int, -1)
18:53 [DEBUG]replaced with: ystep.2 = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: error.3 = phi(incoming_values=[Var(error, tools.py:77), Var(error.4, tools.py:89)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff97878f40>
18:53 [DEBUG]on stmt: error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {126: [<numba.core.ir.Assign object at 0xffff9794d6a0>],
             174: [<numba.core.ir.Assign object at 0xffff9794ddc0>],
             180: [<numba.core.ir.Assign object at 0xffff9797eaf0>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2.1 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: y2.3 = phi(incoming_values=[Var(y2, tools.py:64), Var(y2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2.3
18:53 [DEBUG]on stmt: y2.2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: y2.4 = phi(incoming_values=[Var(y2.3, tools.py:72), Var(y2.2, tools.py:73)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2.4 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2.4
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: ystep.1 = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: ystep.2 = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: error.3 = phi(incoming_values=[Var(error, tools.py:77), Var(error.4, tools.py:89)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def var='ystep' stmt=$256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]find_def_from_top label 252
18:53 [DEBUG]idom 236 from label 252
18:53 [DEBUG]find_def_from_bottom label 236
18:53 [DEBUG]find_def_from_top label 236
18:53 [DEBUG]idom 200 from label 236
18:53 [DEBUG]find_def_from_bottom label 200
18:53 [DEBUG]find_def_from_top label 200
18:53 [DEBUG]idom 198 from label 200
18:53 [DEBUG]find_def_from_bottom label 198
18:53 [DEBUG]find_def_from_top label 198
18:53 [DEBUG]idom 184 from label 198
18:53 [DEBUG]find_def_from_bottom label 184
18:53 [DEBUG]find_def_from_top label 184
18:53 [DEBUG]insert phi node ystep.3 = phi(incoming_values=[], incoming_blocks=[]) at 184
18:53 [DEBUG]find_def_from_bottom label 180
18:53 [DEBUG]incoming_def ystep.2 = const(int, -1)
18:53 [DEBUG]find_def_from_bottom label 174
18:53 [DEBUG]incoming_def ystep.1 = const(int, 1)
18:53 [DEBUG]replaced with: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep.3, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Fix SSA violator on var rev
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2.1 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: y2.3 = phi(incoming_values=[Var(y2, tools.py:64), Var(y2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]first assign: rev
18:53 [DEBUG]replaced with: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2.3
18:53 [DEBUG]on stmt: y2.2 = $y1114.3
18:53 [DEBUG]on stmt: rev = const(bool, True)
18:53 [DEBUG]replaced with: rev.1 = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: y2.4 = phi(incoming_values=[Var(y2.3, tools.py:72), Var(y2.2, tools.py:73)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2.4 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2.4
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: ystep.1 = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: ystep.2 = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: ystep.3 = phi(incoming_values=[Var(ystep.2, tools.py:83), Var(ystep.1, tools.py:81)], incoming_blocks=[180, 174])
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: error.3 = phi(incoming_values=[Var(error, tools.py:77), Var(error.4, tools.py:89)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep.3, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e790>
18:53 [DEBUG]on stmt: error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {90: [<numba.core.ir.Assign object at 0xffff9794da30>],
             102: [<numba.core.ir.Assign object at 0xffff9786ba30>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2.1 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: y2.3 = phi(incoming_values=[Var(y2, tools.py:64), Var(y2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2.3
18:53 [DEBUG]on stmt: y2.2 = $y1114.3
18:53 [DEBUG]on stmt: rev.1 = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: y2.4 = phi(incoming_values=[Var(y2.3, tools.py:72), Var(y2.2, tools.py:73)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2.4 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2.4
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: ystep.1 = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: ystep.2 = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: ystep.3 = phi(incoming_values=[Var(ystep.2, tools.py:83), Var(ystep.1, tools.py:81)], incoming_blocks=[180, 174])
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: error.3 = phi(incoming_values=[Var(error, tools.py:77), Var(error.4, tools.py:89)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep.3, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]find_def var='rev' stmt=$274pred = call bool274(rev, func=bool274, args=(Var(rev, tools.py:70),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]find_def_from_top label 270
18:53 [DEBUG]idom 198 from label 270
18:53 [DEBUG]find_def_from_bottom label 198
18:53 [DEBUG]find_def_from_top label 198
18:53 [DEBUG]idom 184 from label 198
18:53 [DEBUG]find_def_from_bottom label 184
18:53 [DEBUG]find_def_from_top label 184
18:53 [DEBUG]idom 126 from label 184
18:53 [DEBUG]find_def_from_bottom label 126
18:53 [DEBUG]find_def_from_top label 126
18:53 [DEBUG]insert phi node rev.2 = phi(incoming_values=[], incoming_blocks=[]) at 126
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]incoming_def rev = const(bool, False)
18:53 [DEBUG]find_def_from_bottom label 102
18:53 [DEBUG]incoming_def rev.1 = const(bool, True)
18:53 [DEBUG]replaced with: $274pred = call bool274(rev.2, func=bool274, args=(Var(rev.2, tools.py:94),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff9794d7c0>
18:53 [DEBUG]on stmt: error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Fix SSA violator on var y1
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]first assign: y1
18:53 [DEBUG]replaced with: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]on stmt: y1 = $x172.1
18:53 [DEBUG]replaced with: y1.1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2.1 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: y2.3 = phi(incoming_values=[Var(y2, tools.py:64), Var(y2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]on stmt: y1 = y2.3
18:53 [DEBUG]replaced with: y1.2 = y2.3
18:53 [DEBUG]on stmt: y2.2 = $y1114.3
18:53 [DEBUG]on stmt: rev.1 = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: rev.2 = phi(incoming_values=[Var(rev, tools.py:70), Var(rev.1, tools.py:74)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: y2.4 = phi(incoming_values=[Var(y2.3, tools.py:72), Var(y2.2, tools.py:73)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2.4 - y1
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2.4
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: ystep.1 = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: ystep.2 = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: ystep.3 = phi(incoming_values=[Var(ystep.2, tools.py:83), Var(ystep.1, tools.py:81)], incoming_blocks=[180, 174])
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: error.3 = phi(incoming_values=[Var(error, tools.py:77), Var(error.4, tools.py:89)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep.3, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev.2, func=bool274, args=(Var(rev.2, tools.py:94),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FreshVarHandler object at 0xffff9797e850>
18:53 [DEBUG]on stmt: error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0xffff9797e310>],
             70: [<numba.core.ir.Assign object at 0xffff97957430>],
             102: [<numba.core.ir.Assign object at 0xffff97896580>]})
18:53 [DEBUG]==== SSA block rewrite pass on 0
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: a = arg(0, name=a)
18:53 [DEBUG]on stmt: b = arg(1, name=b)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6binary_subscr.2 = static_getitem(value=a, index=0, index_var=$const4.1, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const10.4 = const(int, 1)
18:53 [DEBUG]on stmt: $12binary_subscr.5 = static_getitem(value=a, index=1, index_var=$const10.4, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const16.7 = const(int, 0)
18:53 [DEBUG]on stmt: $18binary_subscr.8 = static_getitem(value=b, index=0, index_var=$const16.7, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $const22.10 = const(int, 1)
18:53 [DEBUG]on stmt: $24binary_subscr.11 = static_getitem(value=b, index=1, index_var=$const22.10, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $26build_tuple.12 = build_tuple(items=[Var($6binary_subscr.2, tools.py:64), Var($12binary_subscr.5, tools.py:64), Var($18binary_subscr.8, tools.py:64), Var($24binary_subscr.11, tools.py:64)])
18:53 [DEBUG]on stmt: $28unpack_sequence.17 = exhaust_iter(value=$26build_tuple.12, count=4)
18:53 [DEBUG]on stmt: $28unpack_sequence.13 = static_getitem(value=$28unpack_sequence.17, index=0, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.14 = static_getitem(value=$28unpack_sequence.17, index=1, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.15 = static_getitem(value=$28unpack_sequence.17, index=2, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $28unpack_sequence.16 = static_getitem(value=$28unpack_sequence.17, index=3, index_var=None, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: x1 = $28unpack_sequence.13
18:53 [DEBUG]on stmt: y1 = $28unpack_sequence.14
18:53 [DEBUG]on stmt: x2 = $28unpack_sequence.15
18:53 [DEBUG]on stmt: y2 = $28unpack_sequence.16
18:53 [DEBUG]on stmt: points = build_list(items=[])
18:53 [DEBUG]on stmt: $42load_global.19 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $48binary_subtract.22 = y2 - y1
18:53 [DEBUG]find_def var='y1' stmt=$48binary_subtract.22 = y2 - y1
18:53 [DEBUG]on stmt: $50call_function.23 = call $42load_global.19($48binary_subtract.22, func=$42load_global.19, args=[Var($48binary_subtract.22, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $52load_global.24 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $58binary_subtract.27 = x2 - x1
18:53 [DEBUG]on stmt: $60call_function.28 = call $52load_global.24($58binary_subtract.27, func=$52load_global.24, args=[Var($58binary_subtract.27, tools.py:66)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: issteep = $50call_function.23 > $60call_function.28
18:53 [DEBUG]on stmt: bool68 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $68pred = call bool68(issteep, func=bool68, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $68pred, 70, 90
18:53 [DEBUG]==== SSA block rewrite pass on 70
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: $x172.1 = x1
18:53 [DEBUG]on stmt: x1.1 = y1
18:53 [DEBUG]find_def var='y1' stmt=x1.1 = y1
18:53 [DEBUG]find_def_from_top label 70
18:53 [DEBUG]idom 0 from label 70
18:53 [DEBUG]find_def_from_bottom label 0
18:53 [DEBUG]on stmt: y1.1 = $x172.1
18:53 [DEBUG]on stmt: $x282.3 = x2
18:53 [DEBUG]on stmt: x2.1 = y2
18:53 [DEBUG]on stmt: y2.1 = $x282.3
18:53 [DEBUG]on stmt: jump 90
18:53 [DEBUG]==== SSA block rewrite pass on 90
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: y2.3 = phi(incoming_values=[Var(y2, tools.py:64), Var(y2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x1.3 = phi(incoming_values=[Var(x1, tools.py:64), Var(x1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: x2.3 = phi(incoming_values=[Var(x2, tools.py:64), Var(x2.1, tools.py:69)], incoming_blocks=[0, 70])
18:53 [DEBUG]on stmt: rev = const(bool, False)
18:53 [DEBUG]on stmt: $98compare_op.3 = x1.3 > x2.3
18:53 [DEBUG]on stmt: bool100 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $100pred = call bool100($98compare_op.3, func=bool100, args=(Var($98compare_op.3, tools.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $100pred, 102, 126
18:53 [DEBUG]==== SSA block rewrite pass on 102
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: $x1104.1 = x1.3
18:53 [DEBUG]on stmt: x1.2 = x2.3
18:53 [DEBUG]on stmt: x2.2 = $x1104.1
18:53 [DEBUG]on stmt: $y1114.3 = y1
18:53 [DEBUG]find_def var='y1' stmt=$y1114.3 = y1
18:53 [DEBUG]find_def_from_top label 102
18:53 [DEBUG]idom 90 from label 102
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]find_def_from_top label 90
18:53 [DEBUG]insert phi node y1.3 = phi(incoming_values=[], incoming_blocks=[]) at 90
18:53 [DEBUG]find_def_from_bottom label 0
18:53 [DEBUG]incoming_def y1 = $28unpack_sequence.14
18:53 [DEBUG]find_def_from_bottom label 70
18:53 [DEBUG]incoming_def y1.1 = $x172.1
18:53 [DEBUG]replaced with: $y1114.3 = y1.3
18:53 [DEBUG]on stmt: y1.2 = y2.3
18:53 [DEBUG]on stmt: y2.2 = $y1114.3
18:53 [DEBUG]on stmt: rev.1 = const(bool, True)
18:53 [DEBUG]on stmt: jump 126
18:53 [DEBUG]==== SSA block rewrite pass on 126
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: rev.2 = phi(incoming_values=[Var(rev, tools.py:70), Var(rev.1, tools.py:74)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: y2.4 = phi(incoming_values=[Var(y2.3, tools.py:72), Var(y2.2, tools.py:73)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x1.4 = phi(incoming_values=[Var(x1.3, tools.py:70), Var(x1.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: x2.4 = phi(incoming_values=[Var(x2.3, tools.py:70), Var(x2.2, tools.py:72)], incoming_blocks=[90, 102])
18:53 [DEBUG]on stmt: deltax = x2.4 - x1.4
18:53 [DEBUG]on stmt: $134load_global.3 = global(abs: <built-in function abs>)
18:53 [DEBUG]on stmt: $140binary_subtract.6 = y2.4 - y1
18:53 [DEBUG]find_def var='y1' stmt=$140binary_subtract.6 = y2.4 - y1
18:53 [DEBUG]find_def_from_top label 126
18:53 [DEBUG]insert phi node y1.4 = phi(incoming_values=[], incoming_blocks=[]) at 126
18:53 [DEBUG]find_def_from_bottom label 90
18:53 [DEBUG]incoming_def y1.3 = phi(incoming_values=[Var(y1, tools.py:64), Var(y1.1, tools.py:68)], incoming_blocks=[0, 70])
18:53 [DEBUG]find_def_from_bottom label 102
18:53 [DEBUG]incoming_def y1.2 = y2.3
18:53 [DEBUG]replaced with: $140binary_subtract.6 = y2.4 - y1.4
18:53 [DEBUG]on stmt: deltay = call $134load_global.3($140binary_subtract.6, func=$134load_global.3, args=[Var($140binary_subtract.6, tools.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $146load_global.8 = global(int: <class 'int'>)
18:53 [DEBUG]on stmt: $const150.10 = const(int, 2)
18:53 [DEBUG]on stmt: $152binary_true_divide.11 = deltax / $const150.10
18:53 [DEBUG]on stmt: error = call $146load_global.8($152binary_true_divide.11, func=$146load_global.8, args=[Var($152binary_true_divide.11, tools.py:77)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: y = y1
18:53 [DEBUG]find_def var='y1' stmt=y = y1
18:53 [DEBUG]replaced with: y = y1.4
18:53 [DEBUG]on stmt: ystep = const(NoneType, None)
18:53 [DEBUG]on stmt: $170compare_op.17 = y1 < y2.4
18:53 [DEBUG]find_def var='y1' stmt=$170compare_op.17 = y1 < y2.4
18:53 [DEBUG]replaced with: $170compare_op.17 = y1.4 < y2.4
18:53 [DEBUG]on stmt: bool172 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $172pred = call bool172($170compare_op.17, func=bool172, args=(Var($170compare_op.17, tools.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $172pred, 174, 180
18:53 [DEBUG]==== SSA block rewrite pass on 174
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: ystep.1 = const(int, 1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 180
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: ystep.2 = const(int, -1)
18:53 [DEBUG]on stmt: jump 184
18:53 [DEBUG]==== SSA block rewrite pass on 184
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: ystep.3 = phi(incoming_values=[Var(ystep.2, tools.py:83), Var(ystep.1, tools.py:81)], incoming_blocks=[180, 174])
18:53 [DEBUG]on stmt: $184load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const190.3 = const(int, 1)
18:53 [DEBUG]on stmt: $192binary_add.4 = x2.4 + $const190.3
18:53 [DEBUG]on stmt: $194call_function.5 = call $184load_global.0(x1.4, $192binary_add.4, func=$184load_global.0, args=[Var(x1.4, tools.py:75), Var($192binary_add.4, tools.py:84)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $196get_iter.6 = getiter(value=$194call_function.5)
18:53 [DEBUG]on stmt: $phi198.0 = $196get_iter.6
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]==== SSA block rewrite pass on 198
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: error.3 = phi(incoming_values=[Var(error, tools.py:77), Var(error.4, tools.py:89)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: y.2 = phi(incoming_values=[Var(y, tools.py:78), Var(y.3, tools.py:86)], incoming_blocks=[184, 285])
18:53 [DEBUG]on stmt: $198for_iter.1 = iternext(value=$phi198.0)
18:53 [DEBUG]on stmt: $198for_iter.2 = pair_first(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $198for_iter.3 = pair_second(value=$198for_iter.1)
18:53 [DEBUG]on stmt: $phi200.1 = $198for_iter.2
18:53 [DEBUG]on stmt: branch $198for_iter.3, 200, 270
18:53 [DEBUG]==== SSA block rewrite pass on 200
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: x = $phi200.1
18:53 [DEBUG]on stmt: bool204 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $204pred = call bool204(issteep, func=bool204, args=(Var(issteep, tools.py:66),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $204pred, 206, 222
18:53 [DEBUG]==== SSA block rewrite pass on 206
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: $208load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $214build_tuple.5 = build_tuple(items=[Var(y.2, tools.py:86), Var(x, tools.py:84)])
18:53 [DEBUG]on stmt: $216call_method.6 = call $208load_method.2($214build_tuple.5, func=$208load_method.2, args=[Var($214build_tuple.5, tools.py:86)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 222
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: $224load_method.2 = getattr(value=points, attr=append)
18:53 [DEBUG]on stmt: $230build_tuple.5 = build_tuple(items=[Var(x, tools.py:84), Var(y.2, tools.py:86)])
18:53 [DEBUG]on stmt: $232call_method.6 = call $224load_method.2($230build_tuple.5, func=$224load_method.2, args=[Var($230build_tuple.5, tools.py:88)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 236
18:53 [DEBUG]==== SSA block rewrite pass on 236
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: $240inplace_subtract.3 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=error.3, rhs=deltay, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.1 = $240inplace_subtract.3
18:53 [DEBUG]on stmt: $const246.5 = const(int, 0)
18:53 [DEBUG]on stmt: $248compare_op.6 = error.1 < $const246.5
18:53 [DEBUG]on stmt: bool250 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $250pred = call bool250($248compare_op.6, func=bool250, args=(Var($248compare_op.6, tools.py:90),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $250pred, 252, 285
18:53 [DEBUG]==== SSA block rewrite pass on 252
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: $256inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=y.2, rhs=ystep.3, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: y.1 = $256inplace_add.3
18:53 [DEBUG]on stmt: $264inplace_add.6 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=error.1, rhs=deltax, static_lhs=Undefined, static_rhs=Undefined)
18:53 [DEBUG]on stmt: error.2 = $264inplace_add.6
18:53 [DEBUG]on stmt: jump 285
18:53 [DEBUG]==== SSA block rewrite pass on 270
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: bool274 = global(bool: <class 'bool'>)
18:53 [DEBUG]on stmt: $274pred = call bool274(rev.2, func=bool274, args=(Var(rev.2, tools.py:94),), kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: branch $274pred, 276, 284
18:53 [DEBUG]==== SSA block rewrite pass on 276
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: $278load_method.1 = getattr(value=points, attr=reverse)
18:53 [DEBUG]on stmt: $280call_method.2 = call $278load_method.1(func=$278load_method.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: jump 284
18:53 [DEBUG]==== SSA block rewrite pass on 284
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: $286return_value.1 = cast(value=points)
18:53 [DEBUG]on stmt: return $286return_value.1
18:53 [DEBUG]==== SSA block rewrite pass on 285
18:53 [DEBUG]Running <numba.core.ssa._FixSSAVars object at 0xffff97896fa0>
18:53 [DEBUG]on stmt: error.4 = phi(incoming_values=[Var(error.1, tools.py:89), Var(error.2, tools.py:92)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: y.3 = phi(incoming_values=[Var(y.2, tools.py:86), Var(y.1, tools.py:91)], incoming_blocks=[236, 252])
18:53 [DEBUG]on stmt: jump 198
18:53 [DEBUG]bytecode dump:
>          0	NOP(arg=None, lineno=1036)
           2	LOAD_GLOBAL(arg=0, lineno=1037)
           4	LOAD_CONST(arg=1, lineno=1037)
           6	LOAD_GLOBAL(arg=1, lineno=1037)
           8	LOAD_FAST(arg=0, lineno=1037)
          10	CALL_FUNCTION(arg=1, lineno=1037)
          12	LOAD_CONST(arg=2, lineno=1037)
          14	BINARY_FLOOR_DIVIDE(arg=None, lineno=1037)
          16	CALL_FUNCTION(arg=2, lineno=1037)
          18	GET_ITER(arg=None, lineno=1037)
>         20	FOR_ITER(arg=40, lineno=1037)
          22	STORE_FAST(arg=1, lineno=1037)
          24	LOAD_FAST(arg=1, lineno=1038)
          26	UNARY_NEGATIVE(arg=None, lineno=1038)
          28	LOAD_CONST(arg=3, lineno=1038)
          30	BINARY_SUBTRACT(arg=None, lineno=1038)
          32	STORE_FAST(arg=2, lineno=1038)
          34	LOAD_FAST(arg=0, lineno=1039)
          36	LOAD_FAST(arg=2, lineno=1039)
          38	BINARY_SUBSCR(arg=None, lineno=1039)
          40	LOAD_FAST(arg=0, lineno=1039)
          42	LOAD_FAST(arg=1, lineno=1039)
          44	BINARY_SUBSCR(arg=None, lineno=1039)
          46	ROT_TWO(arg=None, lineno=1039)
          48	LOAD_FAST(arg=0, lineno=1039)
          50	LOAD_FAST(arg=1, lineno=1039)
          52	STORE_SUBSCR(arg=None, lineno=1039)
          54	LOAD_FAST(arg=0, lineno=1039)
          56	LOAD_FAST(arg=2, lineno=1039)
          58	STORE_SUBSCR(arg=None, lineno=1039)
          60	JUMP_ABSOLUTE(arg=20, lineno=1039)
>         62	LOAD_CONST(arg=0, lineno=1039)
          64	RETURN_VALUE(arg=None, lineno=1039)
18:53 [DEBUG]pending: deque([State(pc_initial=0 nstack_initial=0)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=0 nstack_initial=0)
18:53 [DEBUG]dispatch pc=0, inst=NOP(arg=None, lineno=1036)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1037)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1037)
18:53 [DEBUG]stack ['$2load_global.0']
18:53 [DEBUG]dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=1037)
18:53 [DEBUG]stack ['$2load_global.0', '$const4.1']
18:53 [DEBUG]dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=1037)
18:53 [DEBUG]stack ['$2load_global.0', '$const4.1', '$6load_global.2']
18:53 [DEBUG]dispatch pc=10, inst=CALL_FUNCTION(arg=1, lineno=1037)
18:53 [DEBUG]stack ['$2load_global.0', '$const4.1', '$6load_global.2', '$lst8.3']
18:53 [DEBUG]dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=1037)
18:53 [DEBUG]stack ['$2load_global.0', '$const4.1', '$10call_function.4']
18:53 [DEBUG]dispatch pc=14, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1037)
18:53 [DEBUG]stack ['$2load_global.0', '$const4.1', '$10call_function.4', '$const12.5']
18:53 [DEBUG]dispatch pc=16, inst=CALL_FUNCTION(arg=2, lineno=1037)
18:53 [DEBUG]stack ['$2load_global.0', '$const4.1', '$14binary_floor_divide.6']
18:53 [DEBUG]dispatch pc=18, inst=GET_ITER(arg=None, lineno=1037)
18:53 [DEBUG]stack ['$16call_function.7']
18:53 [DEBUG]end state. edges=[Edge(pc=20, stack=('$18get_iter.8',), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=20 nstack_initial=1)])
18:53 [DEBUG]stack: ['$phi20.0']
18:53 [DEBUG]state.pc_initial: State(pc_initial=20 nstack_initial=1)
18:53 [DEBUG]dispatch pc=20, inst=FOR_ITER(arg=40, lineno=1037)
18:53 [DEBUG]stack ['$phi20.0']
18:53 [DEBUG]end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
18:53 [DEBUG]stack: []
18:53 [DEBUG]state.pc_initial: State(pc_initial=62 nstack_initial=0)
18:53 [DEBUG]dispatch pc=62, inst=LOAD_CONST(arg=0, lineno=1039)
18:53 [DEBUG]stack []
18:53 [DEBUG]dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=1039)
18:53 [DEBUG]stack ['$const62.0']
18:53 [DEBUG]end state. edges=[]
18:53 [DEBUG]pending: deque([State(pc_initial=22 nstack_initial=2)])
18:53 [DEBUG]stack: ['$phi22.0', '$phi22.1']
18:53 [DEBUG]state.pc_initial: State(pc_initial=22 nstack_initial=2)
18:53 [DEBUG]dispatch pc=22, inst=STORE_FAST(arg=1, lineno=1037)
18:53 [DEBUG]stack ['$phi22.0', '$phi22.1']
18:53 [DEBUG]dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1038)
18:53 [DEBUG]stack ['$phi22.0']
18:53 [DEBUG]dispatch pc=26, inst=UNARY_NEGATIVE(arg=None, lineno=1038)
18:53 [DEBUG]stack ['$phi22.0', '$a24.2']
18:53 [DEBUG]dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=1038)
18:53 [DEBUG]stack ['$phi22.0', '$26unary_negative.3']
18:53 [DEBUG]dispatch pc=30, inst=BINARY_SUBTRACT(arg=None, lineno=1038)
18:53 [DEBUG]stack ['$phi22.0', '$26unary_negative.3', '$const28.4']
18:53 [DEBUG]dispatch pc=32, inst=STORE_FAST(arg=2, lineno=1038)
18:53 [DEBUG]stack ['$phi22.0', '$30binary_subtract.5']
18:53 [DEBUG]dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0']
18:53 [DEBUG]dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$lst34.6']
18:53 [DEBUG]dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$lst34.6', '$b36.7']
18:53 [DEBUG]dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$38binary_subscr.8']
18:53 [DEBUG]dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$38binary_subscr.8', '$lst40.9']
18:53 [DEBUG]dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$38binary_subscr.8', '$lst40.9', '$a42.10']
18:53 [DEBUG]dispatch pc=46, inst=ROT_TWO(arg=None, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$38binary_subscr.8', '$44binary_subscr.11']
18:53 [DEBUG]dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$44binary_subscr.11', '$38binary_subscr.8']
18:53 [DEBUG]dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$44binary_subscr.11', '$38binary_subscr.8', '$lst48.12']
18:53 [DEBUG]dispatch pc=52, inst=STORE_SUBSCR(arg=None, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$44binary_subscr.11', '$38binary_subscr.8', '$lst48.12', '$a50.13']
18:53 [DEBUG]dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$44binary_subscr.11']
18:53 [DEBUG]dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$44binary_subscr.11', '$lst54.14']
18:53 [DEBUG]dispatch pc=58, inst=STORE_SUBSCR(arg=None, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0', '$44binary_subscr.11', '$lst54.14', '$b56.15']
18:53 [DEBUG]dispatch pc=60, inst=JUMP_ABSOLUTE(arg=20, lineno=1039)
18:53 [DEBUG]stack ['$phi22.0']
18:53 [DEBUG]end state. edges=[Edge(pc=20, stack=('$phi22.0',), blockstack=(), npush=0)]
18:53 [DEBUG]pending: deque([State(pc_initial=20 nstack_initial=1)])
18:53 [DEBUG]-------------------------Prune PHIs-------------------------
18:53 [DEBUG]Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=62 nstack_initial=0): set()})
18:53 [DEBUG]defmap: {'$phi20.0': State(pc_initial=0 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
18:53 [DEBUG]phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.0': {('$18get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
18:53 [DEBUG]changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
18:53 [DEBUG]keep phismap: {'$phi20.0': {('$18get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
18:53 [DEBUG]new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi20.0': '$18get_iter.8'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
18:53 [DEBUG]----------------------DONE Prune PHIs-----------------------
18:53 [DEBUG]block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$6load_global.2'}), (8, {'res': '$lst8.3'}), (10, {'func': '$6load_global.2', 'args': ['$lst8.3'], 'res': '$10call_function.4'}), (12, {'res': '$const12.5'}), (14, {'lhs': '$10call_function.4', 'rhs': '$const12.5', 'res': '$14binary_floor_divide.6'}), (16, {'func': '$2load_global.0', 'args': ['$const4.1', '$14binary_floor_divide.6'], 'res': '$16call_function.7'}), (18, {'value': '$16call_function.7', 'res': '$18get_iter.8'})), outgoing_phis={'$phi20.0': '$18get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.8',)})
18:53 [DEBUG]block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 22: ('$phi20.0', '$20for_iter.2')})
18:53 [DEBUG]block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'value': '$phi22.1'}), (24, {'res': '$a24.2'}), (26, {'value': '$a24.2', 'res': '$26unary_negative.3'}), (28, {'res': '$const28.4'}), (30, {'lhs': '$26unary_negative.3', 'rhs': '$const28.4', 'res': '$30binary_subtract.5'}), (32, {'value': '$30binary_subtract.5'}), (34, {'res': '$lst34.6'}), (36, {'res': '$b36.7'}), (38, {'index': '$b36.7', 'target': '$lst34.6', 'res': '$38binary_subscr.8'}), (40, {'res': '$lst40.9'}), (42, {'res': '$a42.10'}), (44, {'index': '$a42.10', 'target': '$lst40.9', 'res': '$44binary_subscr.11'}), (48, {'res': '$lst48.12'}), (50, {'res': '$a50.13'}), (52, {'target': '$lst48.12', 'index': '$a50.13', 'value': '$38binary_subscr.8'}), (54, {'res': '$lst54.14'}), (56, {'res': '$b56.15'}), (58, {'target': '$lst54.14', 'index': '$b56.15', 'value': '$44binary_subscr.11'}), (60, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$phi22.0',)})
18:53 [DEBUG]block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}), (64, {'retval': '$const62.0', 'castval': '$64return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
18:53 [DEBUG]label 0:
    lst = arg(0, name=lst)                   ['lst']
    $2load_global.0 = global(range: <class 'range'>) ['$2load_global.0']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6load_global.2 = global(len: <built-in function len>) ['$6load_global.2']
    $10call_function.4 = call $6load_global.2(lst, func=$6load_global.2, args=[Var(lst, listobj.py:1036)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$6load_global.2', 'lst']
    $const12.5 = const(int, 2)               ['$const12.5']
    $14binary_floor_divide.6 = $10call_function.4 // $const12.5 ['$10call_function.4', '$14binary_floor_divide.6', '$const12.5']
    $16call_function.7 = call $2load_global.0($const4.1, $14binary_floor_divide.6, func=$2load_global.0, args=[Var($const4.1, listobj.py:1037), Var($14binary_floor_divide.6, listobj.py:1037)], kws=(), vararg=None, varkwarg=None, target=None) ['$14binary_floor_divide.6', '$16call_function.7', '$2load_global.0', '$const4.1']
    $18get_iter.8 = getiter(value=$16call_function.7) ['$16call_function.7', '$18get_iter.8']
    $phi20.0 = $18get_iter.8                 ['$18get_iter.8', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 62             ['$20for_iter.3']
label 22:
    a = $phi22.1                             ['$phi22.1', 'a']
    $26unary_negative.3 = unary(fn=<built-in function neg>, value=a) ['$26unary_negative.3', 'a']
    $const28.4 = const(int, 1)               ['$const28.4']
    b = $26unary_negative.3 - $const28.4     ['$26unary_negative.3', '$const28.4', 'b']
    $38binary_subscr.8 = getitem(value=lst, index=b, fn=<built-in function getitem>) ['$38binary_subscr.8', 'b', 'lst']
    $44binary_subscr.11 = getitem(value=lst, index=a, fn=<built-in function getitem>) ['$44binary_subscr.11', 'a', 'lst']
    lst[a] = $38binary_subscr.8              ['$38binary_subscr.8', 'a', 'lst']
    lst[b] = $44binary_subscr.11             ['$44binary_subscr.11', 'b', 'lst']
    jump 20                                  []
label 62:
    $const62.0 = const(NoneType, None)       ['$const62.0']
    $64return_value.1 = cast(value=$const62.0) ['$64return_value.1', '$const62.0']
    return $64return_value.1                 ['$64return_value.1']

18:53 [DEBUG]==== SSA block analysis pass on 0
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff975d7910>
18:53 [DEBUG]on stmt: lst = arg(0, name=lst)
18:53 [DEBUG]on stmt: $2load_global.0 = global(range: <class 'range'>)
18:53 [DEBUG]on stmt: $const4.1 = const(int, 0)
18:53 [DEBUG]on stmt: $6load_global.2 = global(len: <built-in function len>)
18:53 [DEBUG]on stmt: $10call_function.4 = call $6load_global.2(lst, func=$6load_global.2, args=[Var(lst, listobj.py:1036)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $const12.5 = const(int, 2)
18:53 [DEBUG]on stmt: $14binary_floor_divide.6 = $10call_function.4 // $const12.5
18:53 [DEBUG]on stmt: $16call_function.7 = call $2load_global.0($const4.1, $14binary_floor_divide.6, func=$2load_global.0, args=[Var($const4.1, listobj.py:1037), Var($14binary_floor_divide.6, listobj.py:1037)], kws=(), vararg=None, varkwarg=None, target=None)
18:53 [DEBUG]on stmt: $18get_iter.8 = getiter(value=$16call_function.7)
18:53 [DEBUG]on stmt: $phi20.0 = $18get_iter.8
18:53 [DEBUG]on stmt: jump 20
18:53 [DEBUG]==== SSA block analysis pass on 20
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff975d7910>
18:53 [DEBUG]on stmt: $20for_iter.1 = iternext(value=$phi20.0)
18:53 [DEBUG]on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
18:53 [DEBUG]on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
18:53 [DEBUG]on stmt: $phi22.1 = $20for_iter.2
18:53 [DEBUG]on stmt: branch $20for_iter.3, 22, 62
18:53 [DEBUG]==== SSA block analysis pass on 22
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff975d7910>
18:53 [DEBUG]on stmt: a = $phi22.1
18:53 [DEBUG]on stmt: $26unary_negative.3 = unary(fn=<built-in function neg>, value=a)
18:53 [DEBUG]on stmt: $const28.4 = const(int, 1)
18:53 [DEBUG]on stmt: b = $26unary_negative.3 - $const28.4
18:53 [DEBUG]on stmt: $38binary_subscr.8 = getitem(value=lst, index=b, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: $44binary_subscr.11 = getitem(value=lst, index=a, fn=<built-in function getitem>)
18:53 [DEBUG]on stmt: lst[a] = $38binary_subscr.8
18:53 [DEBUG]on stmt: lst[b] = $44binary_subscr.11
18:53 [DEBUG]on stmt: jump 20
18:53 [DEBUG]==== SSA block analysis pass on 62
18:53 [DEBUG]Running <numba.core.ssa._GatherDefsHandler object at 0xffff975d7910>
18:53 [DEBUG]on stmt: $const62.0 = const(NoneType, None)
18:53 [DEBUG]on stmt: $64return_value.1 = cast(value=$const62.0)
18:53 [DEBUG]on stmt: return $64return_value.1
18:53 [DEBUG]defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0xffff975cd340>],
             '$14binary_floor_divide.6': [<numba.core.ir.Assign object at 0xffff975fdee0>],
             '$16call_function.7': [<numba.core.ir.Assign object at 0xffff975fd5b0>],
             '$18get_iter.8': [<numba.core.ir.Assign object at 0xffff975fdd30>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0xffff975fd8e0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0xffff975fd6d0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0xffff975fd070>],
             '$26unary_negative.3': [<numba.core.ir.Assign object at 0xffff975fdfa0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0xffff975cda30>],
             '$38binary_subscr.8': [<numba.core.ir.Assign object at 0xffff975cd610>],
             '$44binary_subscr.11': [<numba.core.ir.Assign object at 0xffff975d74f0>],
             '$64return_value.1': [<numba.core.ir.Assign object at 0xffff975e2df0>],
             '$6load_global.2': [<numba.core.ir.Assign object at 0xffff975cd400>],
             '$const12.5': [<numba.core.ir.Assign object at 0xffff975cd970>],
             '$const28.4': [<numba.core.ir.Assign object at 0xffff975e2c40>],
             '$const4.1': [<numba.core.ir.Assign object at 0xffff975cdf70>],
             '$const62.0': [<numba.core.ir.Assign object at 0xffff975c35b0>],
             '$phi20.0': [<numba.core.ir.Assign object at 0xffff975d7df0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0xffff975fdfd0>],
             'a': [<numba.core.ir.Assign object at 0xffff975fda30>],
             'b': [<numba.core.ir.Assign object at 0xffff975e2fa0>],
             'lst': [<numba.core.ir.Assign object at 0xffff975cd0d0>]})
18:53 [DEBUG]SSA violators set()
18:53 [DEBUG]findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
18:53 [DEBUG]findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal bold normal>) = 0.33499999999999996
18:53 [DEBUG]findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
18:53 [DEBUG]findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal bold normal>) = 1.335
18:53 [DEBUG]findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
18:53 [DEBUG]findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'C059' (C059-BdIta.otf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'msbm10' (msbm10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'rsfs10' (rsfs10.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Karumbi' (Karumbi-Regular.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Bold.otf) normal normal roman normal>) = 10.145
18:53 [DEBUG]findfont: score(<Font 'Meera' (Meera-Regular.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Sans' (NimbusSans-BoldItalic.otf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0
18:53 [DEBUG]findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Sans' (VeraBI.ttf) oblique normal bold normal>) = 2.244090909090909
18:53 [DEBUG]findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-Regular.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'C059' (C059-Italic.otf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Sans' (VeraIt.ttf) oblique normal 400 normal>) = 1.9590909090909092
18:53 [DEBUG]findfont: score(<Font 'Z003' (Z003-MediumItalic.otf) italic normal medium normal>) = 11.145
18:53 [DEBUG]findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
18:53 [DEBUG]findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'RaghuMalayalamSans' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24
18:53 [DEBUG]findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'P052' (P052-Roman.otf) normal normal roman normal>) = 10.145
18:53 [DEBUG]findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'URW Bookman' (URWBookman-Demi.otf) normal normal book normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoIt.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Roman' (NimbusRoman-BoldItalic.otf) italic normal roman normal>) = 11.145
18:53 [DEBUG]findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'P052' (P052-Bold.otf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Uroob' (Uroob-Regular.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Rasa' (Rasa-Medium.ttf) normal normal medium normal>) = 10.145
18:53 [DEBUG]findfont: score(<Font 'Nimbus Sans' (NimbusSans-Bold.otf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Rasa' (Rasa-SemiBold.ttf) normal normal semibold normal>) = 10.24
18:53 [DEBUG]findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal medium normal>) = 11.145
18:53 [DEBUG]findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal bold condensed>) = 11.535
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Sans' (VeraBd.ttf) normal normal bold normal>) = 1.2440909090909091
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'URW Gothic' (URWGothic-Book.otf) normal normal book normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Gayathri' (Gayathri-Bold.otf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'D050000L' (D050000L.otf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Yrsa' (Yrsa-Regular.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
18:53 [DEBUG]findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-BoldItalic.otf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24
18:53 [DEBUG]findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Keraleeyam' (Keraleeyam-Regular.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Rasa' (Rasa-Light.ttf) normal normal light normal>) = 10.24
18:53 [DEBUG]findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Chilanka' (Chilanka-Regular.otf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBI.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Rasa' (Rasa-Regular.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMono.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Dyuthi' (Dyuthi-Regular.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'C059' (C059-Roman.otf) normal normal roman normal>) = 10.145
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'esint10' (esint10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Sans' (Vera.ttf) normal normal 400 normal>) = 0.9590909090909092
18:53 [DEBUG]findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Standard Symbols PS' (StandardSymbolsPS.otf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'URW Bookman' (URWBookman-Light.otf) normal normal light normal>) = 10.24
18:53 [DEBUG]findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Italic.otf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Bold.otf) normal normal bold condensed>) = 10.535
18:53 [DEBUG]findfont: score(<Font 'Yrsa' (Yrsa-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'URW Gothic' (URWGothic-BookOblique.otf) oblique normal book normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'URW Bookman' (URWBookman-LightItalic.otf) italic normal light normal>) = 11.24
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Serif' (VeraSeBd.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Gayathri' (Gayathri-Thin.otf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Serif' (VeraSe.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'URW Gothic' (URWGothic-DemiOblique.otf) oblique normal demi normal>) = 11.24
18:53 [DEBUG]findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-BoldOblique.otf) oblique normal bold condensed>) = 11.535
18:53 [DEBUG]findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi-Regular.ttf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Regular.otf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
18:53 [DEBUG]findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'stmary10' (stmary10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24
18:53 [DEBUG]findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Gayathri' (Gayathri-Regular.otf) normal normal regular normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Bitstream Vera Sans Mono' (VeraMoBd.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Regular.otf) normal normal roman normal>) = 10.145
18:53 [DEBUG]findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Yrsa' (Yrsa-SemiBold.ttf) normal normal semibold normal>) = 10.24
18:53 [DEBUG]findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24
18:53 [DEBUG]findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'wasy10' (wasy10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'P052' (P052-Italic.otf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Roman' (NimbusRoman-Italic.otf) italic normal roman normal>) = 11.145
18:53 [DEBUG]findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145
18:53 [DEBUG]findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal medium normal>) = 10.145
18:53 [DEBUG]findfont: score(<Font 'Nimbus Sans' (NimbusSans-Italic.otf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Mono PS' (NimbusMonoPS-Bold.otf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'URW Bookman' (URWBookman-DemiItalic.otf) italic normal book normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'msam10' (msam10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Ubuntu' (Ubuntu-Th.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'URW Gothic' (URWGothic-Demi.otf) normal normal demi normal>) = 10.24
18:53 [DEBUG]findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal book normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal bold condensed>) = 10.535
18:53 [DEBUG]findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'P052' (P052-BoldItalic.otf) italic normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Oblique.otf) oblique normal 400 condensed>) = 11.25
18:53 [DEBUG]findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Yrsa' (Yrsa-Medium.ttf) normal normal medium normal>) = 10.145
18:53 [DEBUG]findfont: score(<Font 'Nimbus Sans Narrow' (NimbusSansNarrow-Regular.otf) normal normal 400 condensed>) = 10.25
18:53 [DEBUG]findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05
18:53 [DEBUG]findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal bold normal>) = 11.335
18:53 [DEBUG]findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'eufm10' (eufm10.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'C059' (C059-Bold.otf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Yrsa' (Yrsa-Light.ttf) normal normal light normal>) = 10.24
18:53 [DEBUG]findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal bold normal>) = 10.335
18:53 [DEBUG]findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
18:53 [DEBUG]findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/usr/share/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
